{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/src/common/NFTcreate.ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/common/NFTcreate.ts","mtime":1666703689729},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9hc3luY1RvR2VuZXJhdG9yID0gcmVxdWlyZSgiL2hvbWUvcXVhbnRpdW0vbGFicy9zb2xhbmEtbmZ0LXB5dGhvbi9uZnQtYXJtb3J5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IiKS5kZWZhdWx0OwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIik7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuTkZUQ3JlYXRlTWFzdGVyID0gZXhwb3J0cy5ORlRDcmVhdGVNZXRhZGF0YSA9IHZvaWQgMDsKCnZhciB0c2xpYl8xID0gcmVxdWlyZSgidHNsaWIiKTsKCnZhciBqc18xID0gcmVxdWlyZSgiQG1ldGFwbGV4L2pzIik7Cgp2YXIgYm5fanNfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoImJuLmpzIikpOwoKdmFyIGNsdXN0ZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoIkAvY29tcG9zYWJsZXMvY2x1c3RlciIpKTsKCnZhciBfY2x1c3Rlcl8xJGRlZmF1bHQgPSBjbHVzdGVyXzEuZGVmYXVsdCgpLAogICAgZ2V0Q29ubmVjdGlvbiA9IF9jbHVzdGVyXzEkZGVmYXVsdC5nZXRDb25uZWN0aW9uOwoKZnVuY3Rpb24gTkZUQ3JlYXRlTWV0YWRhdGEoX3gsIF94MiwgX3gzLCBfeDQpIHsKICByZXR1cm4gX05GVENyZWF0ZU1ldGFkYXRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9ORlRDcmVhdGVNZXRhZGF0YSgpIHsKICBfTkZUQ3JlYXRlTWV0YWRhdGEgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUod2FsbGV0LCBlZGl0aW9uTWludCwgbWV0YWRhdGFEYXRhLCB1cGRhdGVBdXRob3JpdHkpIHsKICAgIHZhciBjb25uZWN0aW9uLCB0eElkLCBtZXRhZGF0YTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgY29ubmVjdGlvbiA9IGdldENvbm5lY3Rpb24oKTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBqc18xLmFjdGlvbnMuY3JlYXRlTWV0YWRhdGEoewogICAgICAgICAgICAgIGNvbm5lY3Rpb246IGNvbm5lY3Rpb24sCiAgICAgICAgICAgICAgd2FsbGV0OiB3YWxsZXQsCiAgICAgICAgICAgICAgZWRpdGlvbk1pbnQ6IGVkaXRpb25NaW50LAogICAgICAgICAgICAgIG1ldGFkYXRhRGF0YTogbWV0YWRhdGFEYXRhLAogICAgICAgICAgICAgIHVwZGF0ZUF1dGhvcml0eTogdXBkYXRlQXV0aG9yaXR5CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgdHhJZCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICByZXR1cm4ganNfMS5wcm9ncmFtcy5tZXRhZGF0YS5NZXRhZGF0YS5nZXRQREEoZWRpdGlvbk1pbnQpOwoKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgbWV0YWRhdGEgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBjb25zb2xlLmxvZygnQ3JlYXRlZCBNZXRhZGF0YTonLCB0eElkLCBtZXRhZGF0YS50b0Jhc2U1OCgpKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgIHR4SWQ6IHR4SWQsCiAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CiAgcmV0dXJuIF9ORlRDcmVhdGVNZXRhZGF0YS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnRzLk5GVENyZWF0ZU1ldGFkYXRhID0gTkZUQ3JlYXRlTWV0YWRhdGE7CgpmdW5jdGlvbiBORlRDcmVhdGVNYXN0ZXIoX3g1LCBfeDYsIF94NywgX3g4KSB7CiAgcmV0dXJuIF9ORlRDcmVhdGVNYXN0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX05GVENyZWF0ZU1hc3RlcigpIHsKICBfTkZUQ3JlYXRlTWFzdGVyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMih3YWxsZXQsIGVkaXRpb25NaW50LCB1cGRhdGVBdXRob3JpdHksIG1heFN1cHBseSkgewogICAgdmFyIGNvbm5lY3Rpb24sIHR4SWQsIGVkaXRpb247CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb25uZWN0aW9uID0gZ2V0Q29ubmVjdGlvbigpOwogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBqc18xLmFjdGlvbnMuY3JlYXRlTWFzdGVyRWRpdGlvbih7CiAgICAgICAgICAgICAgY29ubmVjdGlvbjogY29ubmVjdGlvbiwKICAgICAgICAgICAgICB3YWxsZXQ6IHdhbGxldCwKICAgICAgICAgICAgICBlZGl0aW9uTWludDogZWRpdGlvbk1pbnQsCiAgICAgICAgICAgICAgdXBkYXRlQXV0aG9yaXR5OiB1cGRhdGVBdXRob3JpdHksCiAgICAgICAgICAgICAgbWF4U3VwcGx5OiBtYXhTdXBwbHkgPyBuZXcgYm5fanNfMS5kZWZhdWx0KG1heFN1cHBseSkgOiB1bmRlZmluZWQKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICB0eElkID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjsKICAgICAgICAgICAgcmV0dXJuIGpzXzEucHJvZ3JhbXMubWV0YWRhdGEuTWFzdGVyRWRpdGlvbi5nZXRQREEoZWRpdGlvbk1pbnQpOwoKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgZWRpdGlvbiA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICBjb25zb2xlLmxvZygnQ3JlYXRlZCBNYXN0ZXIgRWRpdGlvbjonLCB0eElkLCBlZGl0aW9uLnRvQmFzZTU4KCkpOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgIHR4SWQ6IHR4SWQsCiAgICAgICAgICAgICAgZWRpdGlvbjogZWRpdGlvbgogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyKTsKICB9KSk7CiAgcmV0dXJuIF9ORlRDcmVhdGVNYXN0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZXhwb3J0cy5ORlRDcmVhdGVNYXN0ZXIgPSBORlRDcmVhdGVNYXN0ZXI7"},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/common/NFTcreate.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,IAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AAEA,yBAA0B,SAAA,CAAA,OAAA,EAA1B;AAAA,IAAQ,aAAR,sBAAQ,aAAR;;SAEsB,iB;;;;;+EAAf,iBACL,MADK,EAEL,WAFK,EAGL,YAHK,EAIL,eAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMC,YAAA,UAND,GAMc,aAAa,EAN3B;AAAA;AAAA,mBAOc,IAAA,CAAA,OAAA,CAAQ,cAAR,CAAuB;AACxC,cAAA,UAAU,EAAV,UADwC;AAExC,cAAA,MAAM,EAAN,MAFwC;AAGxC,cAAA,WAAW,EAAX,WAHwC;AAIxC,cAAA,YAAY,EAAZ,YAJwC;AAKxC,cAAA,eAAe,EAAf;AALwC,aAAvB,CAPd;;AAAA;AAOC,YAAA,IAPD;AAAA;AAAA,mBAckB,IAAA,CAAA,QAAA,CAAS,QAAT,CAAkB,QAAlB,CAA2B,MAA3B,CAAkC,WAAlC,CAdlB;;AAAA;AAcC,YAAA,QAdD;AAeL,YAAA,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC,IAAjC,EAAuC,QAAQ,CAAC,QAAT,EAAvC;AAfK,6CAgBE;AAAE,cAAA,IAAI,EAAJ,IAAF;AAAQ,cAAA,QAAQ,EAAR;AAAR,aAhBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAP,OAAA,CAAA,iBAAA,GAAA,iBAAA;;SAmBsB,e;;;;;6EAAf,kBACL,MADK,EAEL,WAFK,EAGL,eAHK,EAIL,SAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMC,YAAA,UAND,GAMc,aAAa,EAN3B;AAAA;AAAA,mBAOc,IAAA,CAAA,OAAA,CAAQ,mBAAR,CAA4B;AAC7C,cAAA,UAAU,EAAV,UAD6C;AAE7C,cAAA,MAAM,EAAN,MAF6C;AAG7C,cAAA,WAAW,EAAX,WAH6C;AAI7C,cAAA,eAAe,EAAf,eAJ6C;AAK7C,cAAA,SAAS,EAAE,SAAS,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAO,SAAP,CAAH,GAAuB;AALE,aAA5B,CAPd;;AAAA;AAOC,YAAA,IAPD;AAAA;AAAA,mBAciB,IAAA,CAAA,QAAA,CAAS,QAAT,CAAkB,aAAlB,CAAgC,MAAhC,CAAuC,WAAvC,CAdjB;;AAAA;AAcC,YAAA,OAdD;AAeL,YAAA,OAAO,CAAC,GAAR,CAAY,yBAAZ,EAAuC,IAAvC,EAA6C,OAAO,CAAC,QAAR,EAA7C;AAfK,8CAgBE;AAAE,cAAA,IAAI,EAAJ,IAAF;AAAQ,cAAA,OAAO,EAAP;AAAR,aAhBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAP,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["import { actions, programs, Wallet } from '@metaplex/js';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport useCluster from '@/composables/cluster';\n\nconst { getConnection } = useCluster();\n\nexport async function NFTCreateMetadata(\n  wallet: Wallet,\n  editionMint: PublicKey,\n  metadataData: any,\n  updateAuthority?: PublicKey\n) {\n  const connection = getConnection();\n  const txId = await actions.createMetadata({\n    connection,\n    wallet,\n    editionMint,\n    metadataData,\n    updateAuthority,\n  });\n  const metadata = await programs.metadata.Metadata.getPDA(editionMint);\n  console.log('Created Metadata:', txId, metadata.toBase58());\n  return { txId, metadata };\n}\n\nexport async function NFTCreateMaster(\n  wallet: Wallet,\n  editionMint: PublicKey,\n  updateAuthority?: PublicKey,\n  maxSupply?: number\n) {\n  const connection = getConnection();\n  const txId = await actions.createMasterEdition({\n    connection,\n    wallet,\n    editionMint,\n    updateAuthority,\n    maxSupply: maxSupply ? new BN(maxSupply) : undefined,\n  });\n  const edition = await programs.metadata.MasterEdition.getPDA(editionMint);\n  console.log('Created Master Edition:', txId, edition.toBase58());\n  return { txId, edition };\n}\n"],"sourceRoot":""}]}