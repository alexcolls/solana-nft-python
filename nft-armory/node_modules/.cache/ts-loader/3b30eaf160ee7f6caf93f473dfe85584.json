{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/src/composables/copy.ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/composables/copy.ts","mtime":1666703689733},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9hc3luY1RvR2VuZXJhdG9yID0gcmVxdWlyZSgiL2hvbWUvcXVhbnRpdW0vbGFicy9zb2xhbmEtbmZ0LXB5dGhvbi9uZnQtYXJtb3J5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IiKS5kZWZhdWx0OwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIik7CgpyZXF1aXJlKCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciB0c2xpYl8xID0gcmVxdWlyZSgidHNsaWIiKTsKCnZhciB2dWVfMSA9IHJlcXVpcmUoInZ1ZSIpOwoKdmFyIHZ1ZV9jbGlwYm9hcmQzXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCJ2dWUtY2xpcGJvYXJkMyIpKTsKCnZhciB1dGlsXzEgPSByZXF1aXJlKCJAL2NvbW1vbi9oZWxwZXJzL3V0aWwiKTsKCnZhciBfdnVlX2NsaXBib2FyZDNfMSRkZWYgPSB2dWVfY2xpcGJvYXJkM18xLmRlZmF1bHQoKSwKICAgIHRvQ2xpcGJvYXJkID0gX3Z1ZV9jbGlwYm9hcmQzXzEkZGVmLnRvQ2xpcGJvYXJkOwoKZnVuY3Rpb24gdXNlQ29weSgpIHsKICB2YXIgY29weVRleHQgPSB2dWVfMS5yZWYoJ2NvcHknKTsKCiAgdmFyIHNldENvcHlUZXh0ID0gZnVuY3Rpb24gc2V0Q29weVRleHQobmV3VGV4dCkgewogICAgY29weVRleHQudmFsdWUgPSBuZXdUZXh0OwogIH07CgogIHZhciBkb0NvcHkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUodGV4dCkgewogICAgICB2YXIgb2xkVGV4dDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiB0b0NsaXBib2FyZCh0ZXh0KTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBvbGRUZXh0ID0gY29weVRleHQudmFsdWU7CiAgICAgICAgICAgICAgY29weVRleHQudmFsdWUgPSAnY29waWVkISc7CiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBjb3B5VGV4dC52YWx1ZSA9IG9sZFRleHQ7CiAgICAgICAgICAgICAgfSwgMTAwMCk7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA4OwogICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiRXJyb3Igd2hlbiBjb3B5aW5nIHRvIGNsaXBib2FyZCAtICIuY29uY2F0KF9jb250ZXh0LnQwKSk7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzAsIDhdXSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIGRvQ29weShfeCkgewogICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9KCk7CgogIHZhciBkb0NvcHlKU09OID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoanNvbikgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gZG9Db3B5KEpTT04uc3RyaW5naWZ5KHV0aWxfMS5zdHJpbmdpZnlQdWJrZXlzQW5kQk5zSW5PYmplY3QoanNvbikpKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gZG9Db3B5SlNPTihfeDIpIHsKICAgICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwogIH0oKTsKCiAgcmV0dXJuIHsKICAgIGNvcHlUZXh0OiB2dWVfMS5yZWFkb25seShjb3B5VGV4dCksCiAgICBzZXRDb3B5VGV4dDogc2V0Q29weVRleHQsCiAgICBkb0NvcHk6IGRvQ29weSwKICAgIGRvQ29weUpTT046IGRvQ29weUpTT04KICB9Owp9CgpleHBvcnRzLmRlZmF1bHQgPSB1c2VDb3B5Ow=="},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/composables/copy.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,4BAAwB,gBAAA,CAAA,OAAA,EAAxB;AAAA,IAAQ,WAAR,yBAAQ,WAAR;;AAEA,SAAwB,OAAxB,GAA+B;AAC7B,MAAM,QAAQ,GAAG,KAAA,CAAA,GAAA,CAAY,MAAZ,CAAjB;;AAEA,MAAM,WAAW,GAAG,SAAd,WAAc,CAAC,OAAD,EAAoB;AACtC,IAAA,QAAQ,CAAC,KAAT,GAAiB,OAAjB;AACD,GAFD;;AAIA,MAAM,MAAM;AAAA,uEAAG,iBAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEL,WAAW,CAAC,IAAD,CAFN;;AAAA;AAGL,cAAA,OAHK,GAGK,QAAQ,CAAC,KAHd;AAIX,cAAA,QAAQ,CAAC,KAAT,GAAiB,SAAjB;AACA,cAAA,UAAU,CAAC,YAAK;AACd,gBAAA,QAAQ,CAAC,KAAT,GAAiB,OAAjB;AACD,eAFS,EAEP,IAFO,CAAV;AALW;AAAA;;AAAA;AAAA;AAAA;AASX,cAAA,OAAO,CAAC,KAAR;;AATW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAN,MAAM;AAAA;AAAA;AAAA,KAAZ;;AAaA,MAAM,UAAU;AAAA,wEAAG,kBAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACX,MAAM,CAAC,IAAI,CAAC,SAAL,CAAe,MAAA,CAAA,8BAAA,CAA+B,IAA/B,CAAf,CAAD,CADK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAV,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAIA,SAAO;AACL,IAAA,QAAQ,EAAE,KAAA,CAAA,QAAA,CAAS,QAAT,CADL;AAEL,IAAA,WAAW,EAAX,WAFK;AAGL,IAAA,MAAM,EAAN,MAHK;AAIL,IAAA,UAAU,EAAV;AAJK,GAAP;AAMD;;AA9BD,OAAA,CAAA,OAAA,GAAA,OAAA","sourcesContent":["import { readonly, ref } from 'vue';\nimport useClipboard from 'vue-clipboard3';\nimport { stringifyPubkeysAndBNsInObject } from '@/common/helpers/util';\n\nconst { toClipboard } = useClipboard();\n\nexport default function useCopy() {\n  const copyText = ref<string>('copy');\n\n  const setCopyText = (newText: string) => {\n    copyText.value = newText;\n  };\n\n  const doCopy = async (text: any) => {\n    try {\n      await toClipboard(text);\n      const oldText = copyText.value;\n      copyText.value = 'copied!';\n      setTimeout(() => {\n        copyText.value = oldText;\n      }, 1000);\n    } catch (e) {\n      console.error(`Error when copying to clipboard - ${e}`);\n    }\n  };\n\n  const doCopyJSON = async (json: any) => {\n    await doCopy(JSON.stringify(stringifyPubkeysAndBNsInObject(json)));\n  };\n\n  return {\n    copyText: readonly(copyText),\n    setCopyText,\n    doCopy,\n    doCopyJSON,\n  };\n}\n"],"sourceRoot":""}]}