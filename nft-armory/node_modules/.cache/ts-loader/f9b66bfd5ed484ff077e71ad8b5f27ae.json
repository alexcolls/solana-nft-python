{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTMintForm.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTMintForm.vue","mtime":1666703689733},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js","mtime":1666703776480}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTMintForm.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, ref } from 'vue';\nimport { PublicKey } from '@solana/web3.js';\nimport QuestionMark from '@/components/QuestionMark.vue';\nimport { NFTMintEditionFromMaster, NFTMintMaster } from '@/common/NFTmint';\nimport useWallet from '@/composables/wallet';\nimport NotifyWarning from '@/components/notifications/NotifyWarning.vue';\nimport NotifySuccess from '@/components/notifications/NotifySuccess.vue';\nimport { IMintResult, INFT } from '@/common/helpers/types';\nimport LoadingIcon from '@/components/LoadingIcon.vue';\nimport NFTViewCard from '@/components/NFTViewCard.vue';\nimport { NFTGet } from '@/common/NFTget';\nimport useModal from '@/composables/modal';\nimport ModalWindow from '@/components/ModalWindow.vue';\nimport ContentTooltipArweave from '@/components/content/tooltip/ContentTooltipArweave.vue';\nimport useError from '@/composables/error';\nimport ExplorerLink from '@/components/ExplorerLink.vue';\nimport StdNotifications from '@/components/StdNotifications.vue';\nimport { DEFAULTS } from '@/globals';\n\nexport default defineComponent({\n  components: {\n    StdNotifications,\n    ExplorerLink,\n    ContentTooltipArweave,\n    ModalWindow,\n    NFTViewCard,\n    LoadingIcon,\n    NotifySuccess,\n    NotifyWarning,\n    QuestionMark,\n  },\n  setup() {\n    const { isConnected, getWallet } = useWallet();\n    const { error, clearError, setError, tryConvertToPk } = useError();\n\n    const chosenNFTType = ref('master');\n    const isLoading = ref<boolean>(false);\n    const mintResult = ref<IMintResult | null>(null);\n    const newNFT = ref<INFT | null>(null);\n\n    const clearPreviousResults = () => {\n      isLoading.value = false;\n      mintResult.value = null;\n      newNFT.value = null;\n      clearError();\n    };\n\n    const fetchNewNFT = async () => {\n      // this will keep failing, while the network updates, for a while so keep retrying\n      try {\n        [newNFT.value] = await NFTGet({ mint: new PublicKey(mintResult.value!.mint) });\n      } catch (e) {\n        await fetchNewNFT();\n      }\n    };\n\n    // --------------------------------------- master\n    const uri = ref<string | null>(null);\n    const maxSupply = ref<number | null>(null);\n    const mintNewMaster = async () => {\n      clearPreviousResults();\n      isLoading.value = true;\n      NFTMintMaster(getWallet() as any, uri.value!, maxSupply.value as any)\n        .then(async (result) => {\n          mintResult.value = result as IMintResult;\n          isLoading.value = false;\n          await fetchNewNFT();\n        })\n        .catch((e) => {\n          setError(e);\n          isLoading.value = false;\n        });\n    };\n\n    // --------------------------------------- print\n    const masterEditionMint = ref<string | null>(null);\n    const updateAuthority = ref<string | null>();\n\n    const mintNewPrint = async () => {\n      clearPreviousResults();\n      isLoading.value = true;\n\n      // if PKs don't deserialize, we don't want to call the rest of the function\n      const masterPk = tryConvertToPk(masterEditionMint.value!);\n      const updatePk = tryConvertToPk(updateAuthority.value!);\n      if (error.value) {\n        return;\n      }\n\n      NFTMintEditionFromMaster(getWallet() as any, masterPk!, updatePk as any)\n        .then(async (result) => {\n          mintResult.value = result as IMintResult;\n          isLoading.value = false;\n          await fetchNewNFT();\n        })\n        .catch((e) => {\n          setError(e);\n          isLoading.value = false;\n        });\n    };\n\n    // --------------------------------------- modals\n    const { registerModal, isModalVisible, showModal, hideModal } = useModal();\n    registerModal('tooltipArweave');\n\n    return {\n      DEFAULTS,\n      isConnected,\n      error,\n      chosenNFTType,\n      isLoading,\n      mintResult,\n      newNFT,\n      // master\n      uri,\n      maxSupply,\n      mintNewMaster,\n      // print\n      masterEditionMint,\n      updateAuthority,\n      mintNewPrint,\n      // modal\n      isModalVisible,\n      showModal,\n      hideModal,\n    };\n  },\n});\n"],"sourceRoot":""}]}