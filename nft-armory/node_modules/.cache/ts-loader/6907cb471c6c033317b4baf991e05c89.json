{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/src/composables/wallet.ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/composables/wallet.ts","mtime":1666703689733},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciB2dWVfMSA9IHJlcXVpcmUoInZ1ZSIpOwoKdmFyIHdhbGxldF9hZGFwdGVyX3dhbGxldHNfMSA9IHJlcXVpcmUoIkBzb2xhbmEvd2FsbGV0LWFkYXB0ZXItd2FsbGV0cyIpOwoKdmFyIHdhbGxldENsYXNzID0gdnVlXzEucmVmKG51bGwpOwp2YXIgd2FsbGV0QWRhcHRlciA9IHZ1ZV8xLnJlZih2dWVfMS5zaGFsbG93UmVmKG51bGwpKTsKdmFyIHdhbGxldE1hcHBpbmcgPSB7CiAgUGhhbnRvbTogd2FsbGV0X2FkYXB0ZXJfd2FsbGV0c18xLmdldFBoYW50b21XYWxsZXQsCiAgU29sbGV0OiB3YWxsZXRfYWRhcHRlcl93YWxsZXRzXzEuZ2V0U29sbGV0V2FsbGV0LAogICdTb2xsZXQgKEV4dGVuc2lvbiknOiB3YWxsZXRfYWRhcHRlcl93YWxsZXRzXzEuZ2V0U29sbGV0RXh0ZW5zaW9uV2FsbGV0LAogIFNvbGZsYXJlOiB3YWxsZXRfYWRhcHRlcl93YWxsZXRzXzEuZ2V0U29sZmxhcmVXYWxsZXQsCiAgJ1NvbGZsYXJlIChXZWIpJzogd2FsbGV0X2FkYXB0ZXJfd2FsbGV0c18xLmdldFNvbGZsYXJlV2ViV2FsbGV0Cn07CgpmdW5jdGlvbiB1c2VXYWxsZXQoKSB7CiAgdmFyIGlzQ29ubmVjdGVkID0gdnVlXzEuY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuICEhd2FsbGV0QWRhcHRlci52YWx1ZTsKICB9KTsKCiAgdmFyIGdldFdhbGxldCA9IGZ1bmN0aW9uIGdldFdhbGxldCgpIHsKICAgIGlmICh3YWxsZXRBZGFwdGVyLnZhbHVlKSB7CiAgICAgIHJldHVybiB3YWxsZXRBZGFwdGVyLnZhbHVlOwogICAgfQoKICAgIHJldHVybiBudWxsOwogIH07CgogIHZhciBzZXRXYWxsZXQgPSBmdW5jdGlvbiBzZXRXYWxsZXQobmV3V2FsbGV0LCBuZXR3b3JrKSB7CiAgICBjb25zb2xlLmxvZygnYXR0ZW1wdGluZyB0byBzZXQgd2FsbGV0JywgbmV3V2FsbGV0LCBuZXR3b3JrLnN1YnN0cigwLCAxMCkpOwoKICAgIGlmICghbmV3V2FsbGV0KSB7CiAgICAgIGNvbnNvbGUubG9nKCdyZW1vdmluZyBhY3RpdmUgd2FsbGV0Jyk7CiAgICAgIHdhbGxldENsYXNzLnZhbHVlID0gbnVsbDsKICAgICAgd2FsbGV0QWRhcHRlci52YWx1ZSA9IG51bGw7IC8vIGRvbid0IHRoaW5rIEkgbmVlZCBzaGFsbG93UmVmIGhlcmUKCiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgZ290dGVuV2FsbGV0ID0gd2FsbGV0TWFwcGluZ1tuZXdXYWxsZXRdKHsKICAgICAgbmV0d29yazogbmV0d29yawogICAgfSk7CiAgICB2YXIgY29ubmVjdGVkQWRhcHRlciA9IGdvdHRlbldhbGxldC5hZGFwdGVyKCk7CiAgICBjb25uZWN0ZWRBZGFwdGVyLmNvbm5lY3QoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgLy8gb25seSBzZXQgdGhlIHR3byBpZiB0aGUgY2FsbCBzdWNjZWVkcwogICAgICB3YWxsZXRDbGFzcy52YWx1ZSA9IGdvdHRlbldhbGxldDsKICAgICAgd2FsbGV0QWRhcHRlci52YWx1ZSA9IGNvbm5lY3RlZEFkYXB0ZXI7CiAgICAgIGNvbnNvbGUubG9nKCd3YWxsZXQgc3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCcsIG5ld1dhbGxldCwgbmV0d29yay5zdWJzdHIoMCwgMTApKTsKICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHsKICAgICAgY29uc29sZS5sb2coJ29oIG5vLCBmYWlsZWQgdG8gY29ubmVjdCB0byB3YWxsZXQsIHRyeSBhZ2FpbicpOwogICAgICB3YWxsZXRDbGFzcy52YWx1ZSA9IG51bGw7CiAgICAgIHdhbGxldEFkYXB0ZXIudmFsdWUgPSBudWxsOwogICAgfSk7CiAgfTsKCiAgdmFyIGdldFdhbGxldE5hbWUgPSBmdW5jdGlvbiBnZXRXYWxsZXROYW1lKCkgewogICAgaWYgKHdhbGxldENsYXNzLnZhbHVlKSB7CiAgICAgIHJldHVybiB3YWxsZXRDbGFzcy52YWx1ZS5uYW1lOwogICAgfQoKICAgIHJldHVybiBudWxsOwogIH07CgogIHZhciBnZXRXYWxsZXRBZGRyZXNzID0gZnVuY3Rpb24gZ2V0V2FsbGV0QWRkcmVzcygpIHsKICAgIGlmICh3YWxsZXRBZGFwdGVyLnZhbHVlKSB7CiAgICAgIHJldHVybiB3YWxsZXRBZGFwdGVyLnZhbHVlLnB1YmxpY0tleTsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9OwoKICByZXR1cm4gewogICAgd2FsbGV0OiB2dWVfMS5yZWFkb25seSh3YWxsZXRBZGFwdGVyKSwKICAgIGlzQ29ubmVjdGVkOiBpc0Nvbm5lY3RlZCwKICAgIGdldFdhbGxldDogZ2V0V2FsbGV0LAogICAgc2V0V2FsbGV0OiBzZXRXYWxsZXQsCiAgICBnZXRXYWxsZXROYW1lOiBnZXRXYWxsZXROYW1lLAogICAgZ2V0V2FsbGV0QWRkcmVzczogZ2V0V2FsbGV0QWRkcmVzcwogIH07Cn0KCmV4cG9ydHMuZGVmYXVsdCA9IHVzZVdhbGxldDs="},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/composables/wallet.ts"],"names":[],"mappings":"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","sourcesContent":["import { computed, readonly, ref, shallowRef, Ref } from 'vue';\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolflareWebWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  Wallet,\n  WalletName,\n} from '@solana/wallet-adapter-wallets';\nimport { PublicKey } from '@solana/web3.js';\nimport { SignerWalletAdapter } from '@solana/wallet-adapter-base';\n\nconst walletClass = ref<Wallet | null>(null);\nconst walletAdapter = ref<Ref<SignerWalletAdapter | null>>(shallowRef(null));\n\nconst walletMapping = {\n  Phantom: getPhantomWallet,\n  Sollet: getSolletWallet,\n  'Sollet (Extension)': getSolletExtensionWallet,\n  Solflare: getSolflareWallet,\n  'Solflare (Web)': getSolflareWebWallet,\n};\n\nexport default function useWallet() {\n  const isConnected = computed(() => !!walletAdapter.value);\n\n  const getWallet = (): SignerWalletAdapter | null => {\n    if (walletAdapter.value) {\n      return walletAdapter.value;\n    }\n    return null;\n  };\n\n  const setWallet = (newWallet: string | null, network: string) => {\n    console.log('attempting to set wallet', newWallet, network.substr(0, 10));\n\n    if (!newWallet) {\n      console.log('removing active wallet');\n      walletClass.value = null;\n      walletAdapter.value = null; // don't think I need shallowRef here\n      return;\n    }\n\n    const gottenWallet = (walletMapping as any)[newWallet!]({ network });\n    const connectedAdapter = gottenWallet.adapter();\n    connectedAdapter\n      .connect()\n      .then(() => {\n        // only set the two if the call succeeds\n        walletClass.value = gottenWallet;\n        walletAdapter.value = connectedAdapter;\n        console.log('wallet successfully connected', newWallet, network.substr(0, 10));\n      })\n      .catch(() => {\n        console.log('oh no, failed to connect to wallet, try again');\n        walletClass.value = null;\n        walletAdapter.value = null;\n      });\n  };\n\n  const getWalletName = (): WalletName | null => {\n    if (walletClass.value) {\n      return walletClass.value.name;\n    }\n    return null;\n  };\n\n  const getWalletAddress = (): PublicKey | null => {\n    if (walletAdapter.value) {\n      return walletAdapter.value.publicKey;\n    }\n    return null;\n  };\n\n  return {\n    wallet: readonly(walletAdapter),\n    isConnected,\n    getWallet,\n    setWallet,\n    getWalletName,\n    getWalletAddress,\n  };\n}\n"],"sourceRoot":""}]}