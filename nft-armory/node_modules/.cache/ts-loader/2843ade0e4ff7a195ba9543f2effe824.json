{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTMiscForm.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTMiscForm.vue","mtime":1666703689733},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js","mtime":1666703776480}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTMiscForm.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, ref } from 'vue';\nimport NotifyWarning from './notifications/NotifyWarning.vue';\nimport StdNotifications from '@/components/StdNotifications.vue';\nimport NotifySuccess from '@/components/notifications/NotifySuccess.vue';\nimport LoadingIcon from '@/components/LoadingIcon.vue';\nimport ExplorerLink from '@/components/ExplorerLink.vue';\nimport ModalWindow from '@/components/ModalWindow.vue';\nimport ContentTooltipMetadata from '@/components/content/tooltip/ContentTooltipMetadata.vue';\nimport useWallet from '@/composables/wallet';\nimport useError from '@/composables/error';\nimport useModal from '@/composables/modal';\nimport QuestionMark from '@/components/QuestionMark.vue';\nimport { NFTSignMetadata } from '@/common/NFTsign';\nimport useCluster from '@/composables/cluster';\nimport { pause } from '@/common/helpers/util';\nimport ContentTooltipNftToken from '@/components/content/tooltip/ContentTooltipNftToken.vue';\nimport { NFTCreateMaster, NFTCreateMetadata } from '@/common/NFTcreate';\nimport { DEFAULTS } from '@/globals';\n\nexport default defineComponent({\n  components: {\n    ContentTooltipNftToken,\n    QuestionMark,\n    ContentTooltipMetadata,\n    ModalWindow,\n    ExplorerLink,\n    LoadingIcon,\n    NotifySuccess,\n    StdNotifications,\n    NotifyWarning,\n  },\n  setup() {\n    const { isConnected, getWallet } = useWallet();\n    const { error, clearError, setError, tryConvertToPk, tryParseJSON, tryParseMetadataData } =\n      useError();\n    const { getConnection } = useCluster();\n\n    const chosenAction = ref<string>('signMetadata');\n    const isLoading = ref<boolean>(false);\n    const txId = ref<string | null>(null);\n    const pda = ref<string | null>(null);\n    const confirmed = ref<boolean>(false);\n\n    const clearPreviousResults = () => {\n      isLoading.value = false;\n      txId.value = null;\n      pda.value = null;\n      confirmed.value = false;\n      clearError();\n    };\n\n    const checkConfirmed = async (sig: string) => {\n      const conn = getConnection('confirmed');\n      const tx = await conn.getConfirmedTransaction(sig);\n      if (!tx) {\n        await pause(1000);\n        await checkConfirmed(sig);\n        return;\n      }\n      confirmed.value = true;\n    };\n\n    // --------------------------------------- sign metadata\n    const editionMint = ref<string | null>(null);\n\n    const signMetadata = async () => {\n      clearPreviousResults();\n      isLoading.value = true;\n\n      const editionPk = tryConvertToPk(editionMint.value);\n      if (error.value) {\n        return;\n      }\n\n      NFTSignMetadata(getWallet() as any, editionPk!)\n        .then(async (result: string) => {\n          txId.value = result;\n          isLoading.value = false;\n          await checkConfirmed(txId.value!);\n        })\n        .catch((e) => {\n          setError(e);\n          isLoading.value = false;\n        });\n    };\n\n    // --------------------------------------- create metadata\n    const newMetadataData = ref<any>(null);\n    const newUpdateAuthority = ref<string | null>(null);\n\n    const createMetadata = async () => {\n      clearPreviousResults();\n      isLoading.value = true;\n\n      const parsedJSON = tryParseJSON(newMetadataData.value);\n      let parsedMetadata;\n      if (parsedJSON) parsedMetadata = tryParseMetadataData(parsedJSON);\n      const editionPk = tryConvertToPk(editionMint.value);\n      const updatePk = tryConvertToPk(newUpdateAuthority.value);\n      if (error.value) {\n        return;\n      }\n\n      NFTCreateMetadata(\n        getWallet() as any,\n        editionPk!,\n        parsedMetadata as any, // null-undefined conflict\n        updatePk as any // null-undefined conflict\n      )\n        .then(async (result: any) => {\n          txId.value = result.txId;\n          pda.value = result.metadata;\n          isLoading.value = false;\n          await checkConfirmed(txId.value!);\n        })\n        .catch((e) => {\n          setError(e);\n          isLoading.value = false;\n        });\n    };\n\n    // --------------------------------------- create master\n    const maxSupply = ref<number | null>(null);\n\n    const createMaster = async () => {\n      clearPreviousResults();\n      isLoading.value = true;\n\n      const editionPk = tryConvertToPk(editionMint.value);\n      const updatePk = tryConvertToPk(newUpdateAuthority.value);\n      if (error.value) {\n        return;\n      }\n\n      NFTCreateMaster(\n        getWallet() as any,\n        editionPk!,\n        updatePk as any, // null-undefined conflict\n        maxSupply.value as any // null-undefined conflict\n      )\n        .then(async (result: any) => {\n          txId.value = result.txId;\n          pda.value = result.edition;\n          isLoading.value = false;\n          await checkConfirmed(txId.value!);\n        })\n        .catch((e) => {\n          setError(e);\n          isLoading.value = false;\n        });\n    };\n\n    // --------------------------------------- modals\n    const { registerModal, isModalVisible, showModal, hideModal } = useModal();\n    registerModal('tooltipMetadata');\n    registerModal('nftToken');\n\n    return {\n      DEFAULTS,\n      isConnected,\n      error,\n      chosenAction,\n      isLoading,\n      txId,\n      pda,\n      confirmed,\n      // sign\n      editionMint,\n      signMetadata,\n      // create metadata\n      newMetadataData,\n      newUpdateAuthority,\n      createMetadata,\n      // create master\n      maxSupply,\n      createMaster,\n      // modal\n      isModalVisible,\n      showModal,\n      hideModal,\n    };\n  },\n});\n"],"sourceRoot":""}]}