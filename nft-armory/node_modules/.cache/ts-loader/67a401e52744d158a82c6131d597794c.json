{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/src/common/helpers/spl-token.ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/common/helpers/spl-token.ts","mtime":1666703689729},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9hc3luY1RvR2VuZXJhdG9yID0gcmVxdWlyZSgiL2hvbWUvcXVhbnRpdW0vbGFicy9zb2xhbmEtbmZ0LXB5dGhvbi9uZnQtYXJtb3J5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IiKS5kZWZhdWx0OwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZnJvbS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1hcnJheS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmF0LmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuY29weS13aXRoaW4uanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeS5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWx0ZXIuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleC5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZvci1lYWNoLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5jbHVkZXMuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZi5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lml0ZXJhdG9yLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuam9pbi5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lmxhc3QtaW5kZXgtb2YuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5tYXAuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UtcmlnaHQuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZXZlcnNlLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2V0LmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb21lLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29ydC5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5LmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tbG9jYWxlLXN0cmluZy5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLXN0cmluZy5qcyIpOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmdldFRva2VuQmFsYW5jZSA9IGV4cG9ydHMuZGVzZXJpYWxpemVUb2tlbk1pbnQgPSBleHBvcnRzLmRlc2VyaWFsaXplVG9rZW5BY2NvdW50ID0gZXhwb3J0cy5kZXNlcmlhbGl6ZVRva2VuID0gdm9pZCAwOwoKdmFyIHRzbGliXzEgPSByZXF1aXJlKCJ0c2xpYiIpOwoKdmFyIHdlYjNfanNfMSA9IHJlcXVpcmUoIkBzb2xhbmEvd2ViMy5qcyIpOwoKdmFyIHNwbF90b2tlbl8xID0gcmVxdWlyZSgiQHNvbGFuYS9zcGwtdG9rZW4iKTsKCnZhciBjbHVzdGVyXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCJAL2NvbXBvc2FibGVzL2NsdXN0ZXIiKSk7Cgp2YXIgX2NsdXN0ZXJfMSRkZWZhdWx0ID0gY2x1c3Rlcl8xLmRlZmF1bHQoKSwKICAgIGdldENvbm5lY3Rpb24gPSBfY2x1c3Rlcl8xJGRlZmF1bHQuZ2V0Q29ubmVjdGlvbjsKCmZ1bmN0aW9uIGRlc2VyaWFsaXplVG9rZW4oX3gpIHsKICByZXR1cm4gX2Rlc2VyaWFsaXplVG9rZW4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2Rlc2VyaWFsaXplVG9rZW4oKSB7CiAgX2Rlc2VyaWFsaXplVG9rZW4gPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUobWludFB1YmtleSkgewogICAgdmFyIHRlbXBLZXlwYWlyOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAvLyBkb2Vzbid0IG1hdHRlciB3aGljaCBrZXlwYWlyIGdvZXMgaGVyZSwgd2UncmUgbm90IHVzaW5nIGl0IGZvciBhbnl0aGluZy4gVGhpcyBvbmUgaXMgbG9uZyBkb3gnZWQuCiAgICAgICAgICAgIHRlbXBLZXlwYWlyID0gd2ViM19qc18xLktleXBhaXIuZnJvbVNlY3JldEtleShVaW50OEFycmF5LmZyb20oWzIwOCwgMTc1LCAxNTAsIDI0MiwgODgsIDM0LCAxMDgsIDg4LCAxNzcsIDE2LCAxNjgsIDc1LCAxMTUsIDE4MSwgMTk5LCAyNDIsIDEyMCwgNCwgNzgsIDc1LCAxOSwgMjI3LCAxMywgMjE1LCAxODQsIDEwOCwgMjI2LCA1MywgMTExLCAxNDksIDE3OSwgODQsIDEzNywgMTIxLCA3OSwgMSwgMTYwLCAyMjMsIDEyNCwgMjQxLCAyMDIsIDIwMywgMjIwLCAyMzcsIDUwLCAyNDIsIDU3LCAxNTgsIDIyNiwgMjA3LCAyMDMsIDE4OCwgNDMsIDI4LCA3MCwgMTEwLCAyMTQsIDIzNCwgMjUxLCAxNSwgMjQ5LCAxNTcsIDYyLCA4MF0pKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgbmV3IHNwbF90b2tlbl8xLlRva2VuKGdldENvbm5lY3Rpb24oKSwgbWludFB1YmtleSwgc3BsX3Rva2VuXzEuVE9LRU5fUFJPR1JBTV9JRCwgdGVtcEtleXBhaXIpKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwogIHJldHVybiBfZGVzZXJpYWxpemVUb2tlbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnRzLmRlc2VyaWFsaXplVG9rZW4gPSBkZXNlcmlhbGl6ZVRva2VuOwoKZnVuY3Rpb24gZGVzZXJpYWxpemVUb2tlbkFjY291bnQoX3gyLCBfeDMpIHsKICByZXR1cm4gX2Rlc2VyaWFsaXplVG9rZW5BY2NvdW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9kZXNlcmlhbGl6ZVRva2VuQWNjb3VudCgpIHsKICBfZGVzZXJpYWxpemVUb2tlbkFjY291bnQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKG1pbnRQdWJrZXksIHRva2VuQWNjb3VudFB1YmtleSkgewogICAgdmFyIHQ7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBkZXNlcmlhbGl6ZVRva2VuKG1pbnRQdWJrZXkpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgdCA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgdC5nZXRBY2NvdW50SW5mbyh0b2tlbkFjY291bnRQdWJrZXkpKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyKTsKICB9KSk7CiAgcmV0dXJuIF9kZXNlcmlhbGl6ZVRva2VuQWNjb3VudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnRzLmRlc2VyaWFsaXplVG9rZW5BY2NvdW50ID0gZGVzZXJpYWxpemVUb2tlbkFjY291bnQ7CgpmdW5jdGlvbiBkZXNlcmlhbGl6ZVRva2VuTWludChfeDQpIHsKICByZXR1cm4gX2Rlc2VyaWFsaXplVG9rZW5NaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9kZXNlcmlhbGl6ZVRva2VuTWludCgpIHsKICBfZGVzZXJpYWxpemVUb2tlbk1pbnQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKG1pbnRQdWJrZXkpIHsKICAgIHZhciB0OwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gZGVzZXJpYWxpemVUb2tlbihtaW50UHVia2V5KTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHQgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHQuZ2V0TWludEluZm8oKSk7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMyk7CiAgfSkpOwogIHJldHVybiBfZGVzZXJpYWxpemVUb2tlbk1pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZXhwb3J0cy5kZXNlcmlhbGl6ZVRva2VuTWludCA9IGRlc2VyaWFsaXplVG9rZW5NaW50OwoKZnVuY3Rpb24gZ2V0VG9rZW5CYWxhbmNlKF94NSkgewogIHJldHVybiBfZ2V0VG9rZW5CYWxhbmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9nZXRUb2tlbkJhbGFuY2UoKSB7CiAgX2dldFRva2VuQmFsYW5jZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQodG9rZW5BY2NvdW50UHVia2V5KSB7CiAgICB2YXIgYmFsYW5jZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGdldENvbm5lY3Rpb24oKS5nZXRUb2tlbkFjY291bnRCYWxhbmNlKHRva2VuQWNjb3VudFB1YmtleSk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBiYWxhbmNlID0gX2NvbnRleHQ0LnNlbnQ7CgogICAgICAgICAgICBpZiAoYmFsYW5jZS52YWx1ZS51aUFtb3VudCkgewogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIDApOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIGJhbGFuY2UudmFsdWUudWlBbW91bnQpOwoKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTQpOwogIH0pKTsKICByZXR1cm4gX2dldFRva2VuQmFsYW5jZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnRzLmdldFRva2VuQmFsYW5jZSA9IGdldFRva2VuQmFsYW5jZTs="},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/common/helpers/spl-token.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection, Keypair, PublicKey } from '@solana/web3.js';\nimport { AccountInfo, MintInfo, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport useCluster from '@/composables/cluster';\n\nconst { getConnection } = useCluster();\n\nexport async function deserializeToken(mintPubkey: PublicKey): Promise<Token> {\n  // doesn't matter which keypair goes here, we're not using it for anything. This one is long dox'ed.\n  const tempKeypair = Keypair.fromSecretKey(\n    Uint8Array.from([\n      208, 175, 150, 242, 88, 34, 108, 88, 177, 16, 168, 75, 115, 181, 199, 242, 120, 4, 78, 75, 19,\n      227, 13, 215, 184, 108, 226, 53, 111, 149, 179, 84, 137, 121, 79, 1, 160, 223, 124, 241, 202,\n      203, 220, 237, 50, 242, 57, 158, 226, 207, 203, 188, 43, 28, 70, 110, 214, 234, 251, 15, 249,\n      157, 62, 80,\n    ])\n  );\n  return new Token(getConnection(), mintPubkey, TOKEN_PROGRAM_ID, tempKeypair);\n}\n\nexport async function deserializeTokenAccount(\n  mintPubkey: PublicKey,\n  tokenAccountPubkey: PublicKey\n): Promise<AccountInfo> {\n  const t = await deserializeToken(mintPubkey);\n  return t.getAccountInfo(tokenAccountPubkey);\n}\n\nexport async function deserializeTokenMint(mintPubkey: PublicKey): Promise<MintInfo> {\n  const t = await deserializeToken(mintPubkey);\n  return t.getMintInfo();\n}\n\nexport async function getTokenBalance(tokenAccountPubkey: PublicKey): Promise<number> {\n  const balance = await getConnection().getTokenAccountBalance(tokenAccountPubkey);\n  if (!balance.value.uiAmount) {\n    return 0;\n  }\n  return balance.value.uiAmount;\n}\n"],"sourceRoot":""}]}