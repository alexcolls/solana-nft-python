{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/src/composables/pinata.ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/composables/pinata.ts","mtime":1666703689733},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9hc3luY1RvR2VuZXJhdG9yID0gcmVxdWlyZSgiL2hvbWUvcXVhbnRpdW0vbGFicy9zb2xhbmEtbmZ0LXB5dGhvbi9uZnQtYXJtb3J5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IiKS5kZWZhdWx0OwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnkuanMiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciB0c2xpYl8xID0gcmVxdWlyZSgidHNsaWIiKTsKCnZhciBzZGtfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoIkBwaW5hdGEvc2RrIikpOwoKdmFyIGZvcm1fZGF0YV8xID0gdHNsaWJfMS5fX2ltcG9ydERlZmF1bHQocmVxdWlyZSgiZm9ybS1kYXRhIikpOwoKdmFyIGF4aW9zXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCJheGlvcyIpKTsgLy8gdG9kbyB5ZXMgdGhpcyBpcyBJTlRFTlRJT05BTExZIExFQUtFRAovLyAgdGhpcyBpcyBhIGJ1cm5lciBQaW5hdGEgYWNjIHdpdGggMWdiIGZyZWUgc3RvcmFnZSBJJ20gdXNpbmcgZm9yIHN0b3JpbmcgIkkgd2FudCB1ciBORlRzIgovLyAgSSdtIGhvcGluZyBpdCB3b24ndCBiZSBhYnVzZWQgLSBpZiBpdCBkb2VzLCBqdXN0IHB1dCBpbiB5b3VyIG93biBhbmQgcnVuIGxvY2FsbHkgb3IgbGV0IG1lIGtub3cgKHR3aXR0ZXIgQF9pbG1vaSkKCgp2YXIgYXBpS2V5ID0gJzM2YTY1ZDIwOTAwYjc3YjdiOTViJzsKdmFyIGFwaVNlY3JldCA9ICc2MDJlZjllMWQ3YWU4ODA1ZTI2Y2E2MjYxODJhNDA3Y2MxMmZhN2Q4YTY3NDQ2ZDMzY2MxMzIyYWI5M2EyNGVkJzsKCmZ1bmN0aW9uIHVzZVBpbmF0YSgpIHsKICB2YXIgcGluYXRhID0gc2RrXzEuZGVmYXVsdChhcGlLZXksIGFwaVNlY3JldCk7CgogIHZhciB1cGxvYWRJbWcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoYmxvYiwgd2FsbGV0QWRkcikgewogICAgICB2YXIgdXJsLCBkYXRhLCBtZXRhZGF0YSwgcGluYXRhT3B0aW9ucywgcmVzOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgdXJsID0gImh0dHBzOi8vYXBpLnBpbmF0YS5jbG91ZC9waW5uaW5nL3BpbkZpbGVUb0lQRlMiOwogICAgICAgICAgICAgIGRhdGEgPSBuZXcgZm9ybV9kYXRhXzEuZGVmYXVsdCgpOwogICAgICAgICAgICAgIGRhdGEuYXBwZW5kKCdmaWxlJywgYmxvYik7CiAgICAgICAgICAgICAgbWV0YWRhdGEgPSBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICBuYW1lOiAiIi5jb25jYXQod2FsbGV0QWRkci50b0Jhc2U1OCgpLCAiLnBuZyIpCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgZGF0YS5hcHBlbmQoJ3BpbmF0YU1ldGFkYXRhJywgbWV0YWRhdGEpOwogICAgICAgICAgICAgIHBpbmF0YU9wdGlvbnMgPSBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICBjaWRWZXJzaW9uOiAwCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgZGF0YS5hcHBlbmQoJ3BpbmF0YU9wdGlvbnMnLCBwaW5hdGFPcHRpb25zKTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3NfMS5kZWZhdWx0LnBvc3QodXJsLCBkYXRhLCB7CiAgICAgICAgICAgICAgICBtYXhCb2R5TGVuZ3RoOiAnSW5maW5pdHknLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlCiAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAibXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9Ii5jb25jYXQoZGF0YS5fYm91bmRhcnkpLAogICAgICAgICAgICAgICAgICBwaW5hdGFfYXBpX2tleTogYXBpS2V5LAogICAgICAgICAgICAgICAgICBwaW5hdGFfc2VjcmV0X2FwaV9rZXk6IGFwaVNlY3JldAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzLmRhdGEuSXBmc0hhc2gpOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIHVwbG9hZEltZyhfeCwgX3gyKSB7CiAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwogIH0oKTsKCiAgdmFyIGhhc2hUb1VSSSA9IGZ1bmN0aW9uIGhhc2hUb1VSSShoYXNoKSB7CiAgICByZXR1cm4gImh0dHBzOi8vZ2F0ZXdheS5waW5hdGEuY2xvdWQvaXBmcy8iLmNvbmNhdChoYXNoKTsKICB9OwoKICB2YXIgdXBsb2FkSlNPTiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGltZ0lwZnNIYXNoLCB3YWxsZXRBZGRyKSB7CiAgICAgIHZhciBtZXRhZGF0YSwgb3B0aW9ucywgcmVzOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIG1ldGFkYXRhID0gewogICAgICAgICAgICAgICAgbmFtZTogJ0kgV0FOVCBVUiBORlQnLAogICAgICAgICAgICAgICAgc3ltYm9sOiAnV1RCX05GVCcsCiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0htdSBicm90aGEvc2lzdGEnLAogICAgICAgICAgICAgICAgc2VsbGVyX2ZlZV9iYXNpc19wb2ludHM6IDAsCiAgICAgICAgICAgICAgICBpbWFnZTogaGFzaFRvVVJJKGltZ0lwZnNIYXNoKSwKICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IFt7CiAgICAgICAgICAgICAgICAgIHRyYWl0X3R5cGU6ICdwZXJzaXN0ZW5jZScsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAnZW5kbGVzcycKICAgICAgICAgICAgICAgIH1dLAogICAgICAgICAgICAgICAgcHJvcGVydGllczogewogICAgICAgICAgICAgICAgICBjYXRlZ29yeTogJ2ltYWdlJywKICAgICAgICAgICAgICAgICAgZmlsZXM6IFt7CiAgICAgICAgICAgICAgICAgICAgdXJpOiBoYXNoVG9VUkkoaW1nSXBmc0hhc2gpLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbWFnZS9wbmcnCiAgICAgICAgICAgICAgICAgIH1dLAogICAgICAgICAgICAgICAgICBjcmVhdG9yczogW3sKICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiB3YWxsZXRBZGRyLnRvQmFzZTU4KCksCiAgICAgICAgICAgICAgICAgICAgc2hhcmU6IDEwMAogICAgICAgICAgICAgICAgICB9XQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgb3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgIHBpbmF0YU1ldGFkYXRhOiB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICIiLmNvbmNhdCh3YWxsZXRBZGRyLnRvQmFzZTU4KCksICIuanNvbiIpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcGluYXRhT3B0aW9uczogewogICAgICAgICAgICAgICAgICBjaWRWZXJzaW9uOiAwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIHBpbmF0YS5waW5KU09OVG9JUEZTKG1ldGFkYXRhLCBvcHRpb25zKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICByZXMgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgcmVzLklwZnNIYXNoKTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gdXBsb2FkSlNPTihfeDMsIF94NCkgewogICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICByZXR1cm4gewogICAgdXBsb2FkSW1nOiB1cGxvYWRJbWcsCiAgICB1cGxvYWRKU09OOiB1cGxvYWRKU09OLAogICAgaGFzaFRvVVJJOiBoYXNoVG9VUkkKICB9Owp9CgpleHBvcnRzLmRlZmF1bHQgPSB1c2VQaW5hdGE7CnVzZVBpbmF0YSgpOw=="},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/composables/pinata.ts"],"names":[],"mappings":"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","sourcesContent":["import pinataSDK from '@pinata/sdk';\nimport FormData from 'form-data';\nimport axios from 'axios';\nimport { PublicKey } from '@solana/web3.js';\n\n// todo yes this is INTENTIONALLY LEAKED\n//  this is a burner Pinata acc with 1gb free storage I'm using for storing \"I want ur NFTs\"\n//  I'm hoping it won't be abused - if it does, just put in your own and run locally or let me know (twitter @_ilmoi)\nconst apiKey = '36a65d20900b77b7b95b';\nconst apiSecret = '602ef9e1d7ae8805e26ca626182a407cc12fa7d8a67446d33cc1322ab93a24ed';\n\nexport default function usePinata() {\n  const pinata = pinataSDK(apiKey, apiSecret);\n\n  const uploadImg = async (blob: Blob, walletAddr: PublicKey): Promise<string> => {\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n\n    const data = new FormData();\n    data.append('file', blob);\n\n    const metadata = JSON.stringify({\n      name: `${walletAddr.toBase58()}.png`,\n    });\n    data.append('pinataMetadata', metadata);\n\n    const pinataOptions = JSON.stringify({\n      cidVersion: 0,\n    });\n    data.append('pinataOptions', pinataOptions);\n\n    const res = await axios.post(url, data, {\n      maxBodyLength: 'Infinity' as any, // this is needed to prevent axios from erroring out with large files\n      headers: {\n        // @ts-ignore\n        'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n        pinata_api_key: apiKey,\n        pinata_secret_api_key: apiSecret,\n      },\n    });\n    return res.data.IpfsHash;\n  };\n\n  const hashToURI = (hash: string) => `https://gateway.pinata.cloud/ipfs/${hash}`;\n\n  const uploadJSON = async (imgIpfsHash: string, walletAddr: PublicKey) => {\n    const metadata = {\n      name: 'I WANT UR NFT',\n      symbol: 'WTB_NFT',\n      description: 'Hmu brotha/sista',\n      seller_fee_basis_points: 0,\n      image: hashToURI(imgIpfsHash),\n      attributes: [\n        {\n          trait_type: 'persistence',\n          value: 'endless',\n        },\n      ],\n      properties: {\n        category: 'image',\n        files: [\n          {\n            uri: hashToURI(imgIpfsHash),\n            type: 'image/png',\n          },\n        ],\n        creators: [\n          {\n            address: walletAddr.toBase58(),\n            share: 100,\n          },\n        ],\n      },\n    };\n\n    const options = {\n      pinataMetadata: {\n        name: `${walletAddr.toBase58()}.json`,\n      },\n      pinataOptions: {\n        cidVersion: 0,\n      },\n    };\n    const res = await pinata.pinJSONToIPFS(metadata, options as any);\n    return res.IpfsHash;\n  };\n\n  return {\n    uploadImg,\n    uploadJSON,\n    hashToURI,\n  };\n}\n\nusePinata();\n"],"sourceRoot":""}]}