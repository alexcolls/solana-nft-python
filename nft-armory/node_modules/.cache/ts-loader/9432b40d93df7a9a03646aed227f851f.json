{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/src/composables/error.ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/composables/error.ts","mtime":1666703689733},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiKTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciB2dWVfMSA9IHJlcXVpcmUoInZ1ZSIpOwoKdmFyIHdlYjNfanNfMSA9IHJlcXVpcmUoIkBzb2xhbmEvd2ViMy5qcyIpOwoKdmFyIGpzXzEgPSByZXF1aXJlKCJAbWV0YXBsZXgvanMiKTsKCmZ1bmN0aW9uIHVzZUVycm9yKCkgewogIHZhciBlcnJvciA9IHZ1ZV8xLnJlZihudWxsKTsKCiAgdmFyIGNsZWFyRXJyb3IgPSBmdW5jdGlvbiBjbGVhckVycm9yKCkgewogICAgZXJyb3IudmFsdWUgPSBudWxsOwogIH07CgogIHZhciBzZXRFcnJvciA9IGZ1bmN0aW9uIHNldEVycm9yKGUpIHsKICAgIC8vIHRvZG8gdGVtcCBoYWNrIGJlZm9yZSBwcm9wZXIgZXJyb3ItaGFuZGxpbmcgaW4gcGxhY2UKICAgIGlmIChlLm1lc3NhZ2UgPT09ICJDYW5ub3QgcmVhZCBwcm9wZXJ0aWVzIG9mIG51bGwgKHJlYWRpbmcgJ19ibicpIikgewogICAgICBlcnJvci52YWx1ZSA9IG5ldyBFcnJvcignTWlzc2luZyBhIHJlcXVpcmVkIGZpZWxkJyk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoZS5tZXNzYWdlID09PSAndW5hYmxlIHRvIGdldCBtZXRhZGF0YSBqc29uIGZyb20gdXJsIG51bGwnKSB7CiAgICAgIGVycm9yLnZhbHVlID0gbmV3IEVycm9yKCdNaXNzaW5nIFVSSScpOwogICAgICByZXR1cm47CiAgICB9CgogICAgZXJyb3IudmFsdWUgPSBlOwogIH07CgogIHZhciB0cnlDb252ZXJ0VG9QayA9IGZ1bmN0aW9uIHRyeUNvbnZlcnRUb1BrKHN0clBrKSB7CiAgICBpZiAoc3RyUGspIHsKICAgICAgdHJ5IHsKICAgICAgICByZXR1cm4gbmV3IHdlYjNfanNfMS5QdWJsaWNLZXkoc3RyUGspOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgZXJyb3IudmFsdWUgPSBuZXcgRXJyb3IoJ0JhZCBwdWJsaWMga2V5IGVudHJ5LiBEaWQgeW91IHNwZWxsIGl0IGNvcnJlY3RseT8nKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBudWxsOwogIH07CgogIHZhciB0cnlQYXJzZUpTT04gPSBmdW5jdGlvbiB0cnlQYXJzZUpTT04oc3RySlNPTikgewogICAgaWYgKHN0ckpTT04pIHsKICAgICAgdHJ5IHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdHJKU09OKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGVycm9yLnZhbHVlID0gbmV3IEVycm9yKCdGYWlsZWQgdG8gcGFyc2UgSlNPTi4gRGlkIHlvdSBmb3JtYXQgaXQgY29ycmVjdGx5PycpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIG51bGw7CiAgfTsKCiAgdmFyIHRyeVBhcnNlTWV0YWRhdGFEYXRhID0gZnVuY3Rpb24gdHJ5UGFyc2VNZXRhZGF0YURhdGEoanNvbk1ldGFkYXRhKSB7CiAgICBpZiAoanNvbk1ldGFkYXRhKSB7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIG5ldyBqc18xLnByb2dyYW1zLm1ldGFkYXRhLk1ldGFkYXRhRGF0YURhdGEoewogICAgICAgICAgbmFtZToganNvbk1ldGFkYXRhLm5hbWUsCiAgICAgICAgICBzeW1ib2w6IGpzb25NZXRhZGF0YS5zeW1ib2wsCiAgICAgICAgICB1cmk6IGpzb25NZXRhZGF0YS51cmksCiAgICAgICAgICBzZWxsZXJGZWVCYXNpc1BvaW50czoganNvbk1ldGFkYXRhLnNlbGxlckZlZUJhc2lzUG9pbnRzLAogICAgICAgICAgY3JlYXRvcnM6IGpzb25NZXRhZGF0YS5jcmVhdG9ycy5tYXAoZnVuY3Rpb24gKGMpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBqc18xLnByb2dyYW1zLm1ldGFkYXRhLkNyZWF0b3IoewogICAgICAgICAgICAgIGFkZHJlc3M6IGMuYWRkcmVzcywKICAgICAgICAgICAgICB2ZXJpZmllZDogYy52ZXJpZmllZCwKICAgICAgICAgICAgICBzaGFyZTogYy5zaGFyZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pCiAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICBlcnJvci52YWx1ZSA9IG5ldyBFcnJvcignRmFpbGVkIHRvIHBhcnNlIE1ldGFkYXRhLiBEaWQgeW91IGVudGVyIGFsbCB0aGUgcmVxdWlyZWQgZmllbGRzPycpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIG51bGw7CiAgfTsKCiAgcmV0dXJuIHsKICAgIGVycm9yOiB2dWVfMS5yZWFkb25seShlcnJvciksCiAgICBjbGVhckVycm9yOiBjbGVhckVycm9yLAogICAgc2V0RXJyb3I6IHNldEVycm9yLAogICAgdHJ5Q29udmVydFRvUGs6IHRyeUNvbnZlcnRUb1BrLAogICAgdHJ5UGFyc2VKU09OOiB0cnlQYXJzZUpTT04sCiAgICB0cnlQYXJzZU1ldGFkYXRhRGF0YTogdHJ5UGFyc2VNZXRhZGF0YURhdGEKICB9Owp9CgpleHBvcnRzLmRlZmF1bHQgPSB1c2VFcnJvcjs="},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/composables/error.ts"],"names":[],"mappings":"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","sourcesContent":["import { readonly, ref } from 'vue';\nimport { Keypair, PublicKey } from '@solana/web3.js';\nimport { programs } from '@metaplex/js';\n\nexport default function useError() {\n  const error = ref<Error | null>(null);\n\n  const clearError = () => {\n    error.value = null;\n  };\n\n  const setError = (e: Error) => {\n    // todo temp hack before proper error-handling in place\n    if (e.message === \"Cannot read properties of null (reading '_bn')\") {\n      error.value = new Error('Missing a required field');\n      return;\n    }\n    if (e.message === 'unable to get metadata json from url null') {\n      error.value = new Error('Missing URI');\n      return;\n    }\n    error.value = e;\n  };\n\n  const tryConvertToPk = (strPk: string | null): PublicKey | null => {\n    if (strPk) {\n      try {\n        return new PublicKey(strPk);\n      } catch (e) {\n        error.value = new Error('Bad public key entry. Did you spell it correctly?');\n      }\n    }\n    return null;\n  };\n\n  const tryParseJSON = (strJSON: string | null): any => {\n    if (strJSON) {\n      try {\n        return JSON.parse(strJSON);\n      } catch (e) {\n        error.value = new Error('Failed to parse JSON. Did you format it correctly?');\n      }\n    }\n    return null;\n  };\n\n  const tryParseMetadataData = (jsonMetadata: any): programs.metadata.MetadataDataData | null => {\n    if (jsonMetadata) {\n      try {\n        return new programs.metadata.MetadataDataData({\n          name: jsonMetadata.name,\n          symbol: jsonMetadata.symbol,\n          uri: jsonMetadata.uri,\n          sellerFeeBasisPoints: jsonMetadata.sellerFeeBasisPoints,\n          creators: jsonMetadata.creators.map(\n            (c: any) =>\n              new programs.metadata.Creator({\n                address: c.address,\n                verified: c.verified,\n                share: c.share,\n              })\n          ),\n        });\n      } catch (e) {\n        console.log(e);\n        error.value = new Error('Failed to parse Metadata. Did you enter all the required fields?');\n      }\n    }\n    return null;\n  };\n\n  return {\n    error: readonly(error),\n    clearError,\n    setError,\n    tryConvertToPk,\n    tryParseJSON,\n    tryParseMetadataData,\n  };\n}\n"],"sourceRoot":""}]}