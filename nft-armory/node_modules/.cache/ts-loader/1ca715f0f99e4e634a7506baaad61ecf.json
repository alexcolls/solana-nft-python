{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTUpdateForm.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTUpdateForm.vue","mtime":1666703689733},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js","mtime":1666703776480}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTUpdateForm.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, ref } from 'vue';\nimport { PublicKey } from '@solana/web3.js';\nimport QuestionMark from '@/components/QuestionMark.vue';\nimport NotifySuccess from '@/components/notifications/NotifySuccess.vue';\nimport LoadingIcon from '@/components/LoadingIcon.vue';\nimport NFTViewCard from '@/components/NFTViewCard.vue';\nimport ModalWindow from '@/components/ModalWindow.vue';\nimport useWallet from '@/composables/wallet';\nimport useError from '@/composables/error';\nimport { INFT } from '@/common/helpers/types';\nimport { NFTGet } from '@/common/NFTget';\nimport { NFTUpdate } from '@/common/NFTupdate';\nimport useModal from '@/composables/modal';\nimport ExplorerLink from '@/components/ExplorerLink.vue';\nimport { objectOneInsideObjectTwo } from '@/common/helpers/util';\nimport ContentTooltipMetadata from '@/components/content/tooltip/ContentTooltipMetadata.vue';\nimport StdNotifications from '@/components/StdNotifications.vue';\nimport { DEFAULTS } from '@/globals';\n\nexport default defineComponent({\n  components: {\n    StdNotifications,\n    ContentTooltipMetadata,\n    ExplorerLink,\n    ModalWindow,\n    NFTViewCard,\n    LoadingIcon,\n    NotifySuccess,\n    QuestionMark,\n  },\n  setup() {\n    const { isConnected, getWallet } = useWallet();\n    const { error, clearError, setError, tryConvertToPk, tryParseJSON, tryParseMetadataData } =\n      useError();\n\n    const isLoading = ref<boolean>(false);\n    const txId = ref<string | null>(null);\n    const updatedNFT = ref<INFT | null>(null);\n\n    const clearPreviousResults = () => {\n      isLoading.value = false;\n      txId.value = null;\n      updatedNFT.value = null;\n      clearError();\n    };\n\n    // --------------------------------------- update nft\n    const editionMint = ref<string | null>(null);\n    const newMetadataData = ref<any>(null);\n    const newUpdateAuthority = ref<string | null>(null);\n    const primarySaleHappened = ref<boolean | null>(null);\n\n    const fetchUpdatedNFT = async (): Promise<void> => {\n      // retry recursively until new attributes confirmed on the network\n      try {\n        const [fetchedNFT] = await NFTGet({ mint: new PublicKey(editionMint.value!) });\n        // if any of the below conditions fail, then we need to fetch again\n        if (\n          (newMetadataData.value &&\n            !objectOneInsideObjectTwo(\n              tryParseMetadataData(tryParseJSON(newMetadataData.value)),\n              fetchedNFT.metadataOnchain.data\n            )) ||\n          (newUpdateAuthority.value &&\n            newUpdateAuthority.value !== fetchedNFT.metadataOnchain.updateAuthority) ||\n          // primary sale can only be set to \"true\" = the only use case we're checking\n          (primarySaleHappened.value &&\n            (fetchedNFT.metadataOnchain.primarySaleHappened as any as number) !== 1)\n        ) {\n          return await fetchUpdatedNFT();\n        }\n\n        updatedNFT.value = fetchedNFT;\n      } catch (e) {\n        await fetchUpdatedNFT();\n      }\n    };\n\n    const updateNFT = async () => {\n      clearPreviousResults();\n      isLoading.value = true;\n\n      const parsedJSON = tryParseJSON(newMetadataData.value);\n      let parsedMetadata;\n      if (parsedJSON) parsedMetadata = tryParseMetadataData(parsedJSON);\n      const editionPk = tryConvertToPk(editionMint.value);\n      const updatePk = tryConvertToPk(newUpdateAuthority.value);\n      if (error.value) {\n        return;\n      }\n\n      NFTUpdate(\n        getWallet() as any,\n        editionPk!,\n        parsedMetadata as any, // null-undefined conflict\n        updatePk as any, // null-undefined conflict\n        primarySaleHappened.value as any // null-undefined conflict\n      )\n        .then(async (result: string) => {\n          txId.value = result;\n          isLoading.value = false;\n          await fetchUpdatedNFT();\n        })\n        .catch((e) => {\n          setError(e);\n          isLoading.value = false;\n        });\n    };\n\n    // --------------------------------------- modals\n    const { registerModal, isModalVisible, showModal, hideModal } = useModal();\n    registerModal('tooltipMetadata');\n\n    return {\n      DEFAULTS,\n      isConnected,\n      error,\n      isLoading,\n      txId,\n      updatedNFT,\n      // update\n      editionMint,\n      newMetadataData,\n      newUpdateAuthority,\n      primarySaleHappened,\n      updateNFT,\n      // modal\n      isModalVisible,\n      showModal,\n      hideModal,\n    };\n  },\n});\n"],"sourceRoot":""}]}