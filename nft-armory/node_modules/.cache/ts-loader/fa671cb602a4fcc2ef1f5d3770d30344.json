{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/src/common/NFTget.ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/common/NFTget.ts","mtime":1666703689729},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/common/NFTget.ts"],"names":[],"mappings":"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","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport axios from 'axios';\nimport { Account, programs } from '@metaplex/js';\nimport {\n  Edition,\n  EditionData,\n  MasterEdition,\n  Metadata,\n  MetadataData,\n  MetadataKey,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport bs58 from 'bs58';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { getEnumKeyByEnumValue, okToFailAsync } from './helpers/util';\nimport { deserializeTokenAccount, deserializeTokenMint } from './helpers/spl-token';\nimport { INFT, INFTParams } from './helpers/types';\nimport useCluster from '@/composables/cluster';\nimport { DEFAULTS, EE, ERR_NO_NFTS } from '@/globals';\nimport { estimateNFTLoadTime, IUpdateLoadingParams, LoadStatus } from '@/composables/loading';\nimport { processRarity } from '@/common/rarity';\n\nconst { getConnection } = useCluster();\n\n// --------------------------------------- get tokens\n\ninterface IToken {\n  mint: PublicKey;\n  address: PublicKey;\n  metadataPDA?: PublicKey;\n  metadataOnchain?: MetadataData;\n}\n\nconst baseFilters = [\n  // Filter for MetadataV1 by key\n  {\n    memcmp: {\n      offset: 0,\n      bytes: bs58.encode(Buffer.from([MetadataKey.MetadataV1])),\n    },\n  },\n].filter(Boolean);\n\nasync function getHolderByMint(mint: PublicKey): Promise<PublicKey> {\n  const tokens = await getConnection().getTokenLargestAccounts(mint);\n  return tokens.value[0].address; // since it's an NFT, we just grab the 1st account\n}\n\nfunction deserializeMetadata(rawMetadata: any) {\n  const acc = new Account(rawMetadata.pubkey, rawMetadata.account);\n  return Metadata.from(acc);\n}\n\nasync function metadatasToTokens(rawMetadatas: any[]): Promise<IToken[]> {\n  const promises = await Promise.all(\n    rawMetadatas.map(async (m) => {\n      try {\n        const metadata = deserializeMetadata(m);\n        const mint = new PublicKey(metadata.data.mint);\n        const address = await getHolderByMint(mint);\n        return {\n          mint,\n          address,\n          metadataPDA: metadata.pubkey,\n          metadataOnchain: metadata.data,\n        } as IToken;\n      } catch (e) {\n        console.log('failed to deserialize one of the fetched metadatas');\n      }\n    })\n  );\n  return promises.filter((t) => !!t) as IToken[];\n}\n\nasync function getTokensByCreator(creator: PublicKey): Promise<IToken[]> {\n  const rawMetadatas = await getConnection().getProgramAccounts(\n    new PublicKey(DEFAULTS.METADATA_PROGRAM_ID),\n    {\n      filters: [\n        ...baseFilters,\n        {\n          memcmp: {\n            offset: programs.metadata.computeCreatorOffset(0),\n            bytes: creator.toBase58(),\n          },\n        },\n      ],\n    }\n  );\n  return metadatasToTokens(rawMetadatas);\n}\n\nasync function getTokensByUpdateAuthority(updateAuthority: PublicKey): Promise<IToken[]> {\n  const rawMetadatas = await getConnection().getProgramAccounts(\n    new PublicKey(DEFAULTS.METADATA_PROGRAM_ID),\n    {\n      filters: [\n        ...baseFilters,\n        {\n          memcmp: {\n            offset: 1,\n            bytes: updateAuthority.toBase58(),\n          },\n        },\n      ],\n    }\n  );\n  return metadatasToTokens(rawMetadatas);\n}\n\nasync function getTokensByMint(mint: PublicKey): Promise<IToken[]> {\n  return [\n    {\n      mint,\n      address: await getHolderByMint(mint),\n    },\n  ];\n}\n\nasync function getTokensByOwner(owner: PublicKey): Promise<IToken[]> {\n  const tokens = await getConnection().getParsedTokenAccountsByOwner(owner, {\n    programId: TOKEN_PROGRAM_ID,\n  });\n\n  // initial filter - only tokens with 0 decimals & of which 1 is present in the wallet\n  return tokens.value\n    .filter((t) => {\n      const amount = t.account.data.parsed.info.tokenAmount;\n      return amount.decimals === 0 && amount.uiAmount === 1;\n    })\n    .map((t) => ({\n      address: new PublicKey(t.pubkey),\n      mint: new PublicKey(t.account.data.parsed.info.mint),\n    }));\n}\n\n// --------------------------------------- enrich with useful stuff\n\nasync function getMetadataByMint(\n  mint: PublicKey,\n  metadataPDA?: PublicKey,\n  metadataOnchain?: MetadataData\n) {\n  const pda = metadataPDA ?? (await Metadata.getPDA(mint));\n  const onchain = metadataOnchain ?? (await Metadata.load(getConnection(), pda)).data;\n  const metadataExternal = (await axios.get(onchain.data.uri)).data;\n  return {\n    metadataPDA: pda,\n    metadataOnchain: onchain,\n    metadataExternal,\n  };\n}\n\nasync function getEditionInfoByMint(mint: PublicKey) {\n  // untriaged\n  const pda = await Edition.getPDA(mint);\n  const info = await Account.getInfo(getConnection(), pda);\n  const key = info?.data[0];\n\n  const editionType = getEnumKeyByEnumValue(MetadataKey, key);\n  let editionPDA;\n  let editionData;\n  let masterEditionPDA;\n  let masterEditionData;\n\n  // triaged\n  switch (key) {\n    case MetadataKey.EditionV1:\n      editionPDA = pda;\n      editionData = new Edition(pda, info).data;\n      // we can further get master edition info, since we know the parent\n      ({ masterEditionPDA, masterEditionData } = await okToFailAsync(getParentEdition, [\n        editionData,\n      ]));\n      break;\n    case MetadataKey.MasterEditionV1:\n    case MetadataKey.MasterEditionV2:\n      masterEditionData = new MasterEdition(pda, info).data;\n      masterEditionPDA = pda;\n      break;\n  }\n\n  return {\n    editionType,\n    editionPDA,\n    editionData,\n    masterEditionPDA,\n    masterEditionData,\n  };\n}\n\nasync function getParentEdition(editionData: EditionData) {\n  const masterEditionPDA = new PublicKey(editionData.parent);\n  const masterInfo = await Account.getInfo(getConnection(), masterEditionPDA);\n  const masterEditionData = new MasterEdition(masterEditionPDA, masterInfo).data;\n  return { masterEditionPDA, masterEditionData };\n}\n\nasync function tokensToEnrichedNFTs(tokens: IToken[]): Promise<INFT[]> {\n  return Promise.all(\n    tokens.map(async (t) =>\n      // console.log(`Processing Mint ${t.mint}`)\n      ({\n        mint: t.mint,\n        address: t.address,\n        splTokenInfo: await okToFailAsync(deserializeTokenAccount, [t.mint, t.address]),\n        splMintInfo: await okToFailAsync(deserializeTokenMint, [t.mint]),\n        ...(await okToFailAsync(\n          getMetadataByMint,\n          [t.mint, t.metadataPDA, t.metadataOnchain],\n          true\n        )),\n        ...(await okToFailAsync(getEditionInfoByMint, [t.mint], true)),\n      })\n    )\n  );\n}\n\n// --------------------------------------- helpers\n\nfunction filterOutIncompleteNFTs(NFTs: INFT[]): INFT[] {\n  return NFTs.filter(\n    (n) =>\n      n.mint && // guaranteed\n      n.metadataOnchain && // guaranteed\n      n.metadataExternal // requirement, otherwise no picture\n  );\n}\n\n// --------------------------------------- interface\n\nexport async function NFTGet(\n  { owner, creator, mint, updateAuthority } = {} as INFTParams\n): Promise<INFT[]> {\n  const t1 = performance.now();\n\n  let tokens: IToken[] = [];\n  if (owner) {\n    console.log('Time to get em NFTs by owner:', owner.toBase58());\n    tokens = await getTokensByOwner(owner);\n  } else if (creator) {\n    console.log('Time to get em NFTs by creator:', creator.toBase58());\n    tokens = await getTokensByCreator(creator);\n  } else if (mint) {\n    console.log('Time to get em NFTs by mint:', mint.toBase58());\n    tokens = await getTokensByMint(mint);\n  } else if (updateAuthority) {\n    console.log('Time to get em NFTs by authority:', updateAuthority.toBase58());\n    tokens = await getTokensByUpdateAuthority(updateAuthority);\n  } else {\n    throw new Error('You must pass one of owner / creator / authority / mint');\n  }\n\n  if (tokens.length === 0) {\n    throw ERR_NO_NFTS;\n  }\n\n  EE.emit('loading', {\n    newStatus: LoadStatus.Loading,\n    newProgress: 50,\n    maxProgress: 90,\n    newText: `Found ${\n      tokens.length\n    } potential NFTs. Fetching metadata... ETA: <${estimateNFTLoadTime(tokens.length)} min`,\n  } as IUpdateLoadingParams);\n\n  const t2 = performance.now();\n  console.log(`Found ${tokens.length} tokens`);\n  console.log('Time:', (t2 - t1) / 1000);\n\n  const nfts = await tokensToEnrichedNFTs(tokens);\n  const t3 = performance.now();\n  console.log(`Prepared a total ${nfts.length} NFTs`);\n  console.log('Time:', (t3 - t2) / 1000);\n  console.log('TOTAL time:', (t3 - t1) / 1000);\n\n  const validNFTs = filterOutIncompleteNFTs(nfts);\n  let finalNFts = validNFTs;\n\n  // process rarity - for creators / updateAuth only\n  if (creator || updateAuthority) {\n    try {\n      finalNFts = processRarity(validNFTs);\n    } catch (e) {\n      console.log('Failed to calc rarity with error', e);\n    }\n  }\n\n  return finalNFts;\n}\n"],"sourceRoot":""}]}