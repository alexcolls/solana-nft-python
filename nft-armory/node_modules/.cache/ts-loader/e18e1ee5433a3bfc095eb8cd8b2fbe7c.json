{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/src/composables/cluster.ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/composables/cluster.ts","mtime":1666703689733},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9hc3luY1RvR2VuZXJhdG9yID0gcmVxdWlyZSgiL2hvbWUvcXVhbnRpdW0vbGFicy9zb2xhbmEtbmZ0LXB5dGhvbi9uZnQtYXJtb3J5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IiKS5kZWZhdWx0OwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIpOwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIik7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuQ2x1c3RlciA9IHZvaWQgMDsKCnZhciB0c2xpYl8xID0gcmVxdWlyZSgidHNsaWIiKTsKCnZhciB2dWVfMSA9IHJlcXVpcmUoInZ1ZSIpOwoKdmFyIHdlYjNfanNfMSA9IHJlcXVpcmUoIkBzb2xhbmEvd2ViMy5qcyIpOwoKdmFyIHdlYjNfdG9rZW5fYXV0aF8xID0gcmVxdWlyZSgiQHN0cmF0YS1mb3VuZGF0aW9uL3dlYjMtdG9rZW4tYXV0aCIpOwoKdmFyIGF4aW9zXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCJheGlvcyIpKTsKCnZhciBnbG9iYWxzXzEgPSByZXF1aXJlKCJAL2dsb2JhbHMiKTsKCnZhciBDbHVzdGVyOwoKKGZ1bmN0aW9uIChDbHVzdGVyKSB7CiAgQ2x1c3RlclsiTWFpbm5ldCJdID0gIm1haW5uZXQiOwogIENsdXN0ZXJbIkRldm5ldCJdID0gImRldm5ldCI7CiAgQ2x1c3RlclsiVGVzdG5ldCJdID0gInRlc3RuZXQiOwogIENsdXN0ZXJbIkxvY2FsbmV0Il0gPSAibG9jYWxuZXQiOwp9KShDbHVzdGVyID0gZXhwb3J0cy5DbHVzdGVyIHx8IChleHBvcnRzLkNsdXN0ZXIgPSB7fSkpOwoKdmFyIGNsdXN0ZXJVUkxNYXBwaW5nID0gewogIG1haW5uZXQ6IHByb2Nlc3MuZW52LlZVRV9BUFBfTUFJTk5FVF9VUkwgfHwgJ2h0dHBzOi8vYXBpLm1haW5uZXQtYmV0YS5zb2xhbmEuY29tJywKICBkZXZuZXQ6IHByb2Nlc3MuZW52LlZVRV9BUFBfREVWTkVUX1VSTCB8fCAnaHR0cHM6Ly9hcGkuZGV2bmV0LnNvbGFuYS5jb20nLAogIHRlc3RuZXQ6IHByb2Nlc3MuZW52LlZVRV9BUFBfVEVTVE5FVF9VUkwgfHwgJ2h0dHBzOi8vYXBpLnRlc3RuZXQuc29sYW5hLmNvbScsCiAgbG9jYWxuZXQ6IHByb2Nlc3MuZW52LlZVRV9BUFBfTE9DQUxORVRfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0Ojg4OTknCn07CnZhciBjbHVzdGVyID0gdnVlXzEucmVmKGdsb2JhbHNfMS5ERUZBVUxUUy5DTFVTVEVSKTsKCmZ1bmN0aW9uIHVzZUNsdXN0ZXIoKSB7CiAgdmFyIGdldENsdXN0ZXJVUkwgPSBmdW5jdGlvbiBnZXRDbHVzdGVyVVJMKCkgewogICAgcmV0dXJuIGNsdXN0ZXJVUkxNYXBwaW5nW2NsdXN0ZXIudmFsdWVdOwogIH07CgogIHZhciBnZXRUb2tlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBheGlvc18xLmRlZmF1bHQuZ2V0KHByb2Nlc3MuZW52LlZVRV9BUFBfR0VOR09fQVVUSCk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQuc2VudC5kYXRhLmFjY2Vzc190b2tlbik7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpOwoKICAgIHJldHVybiBmdW5jdGlvbiBnZXRUb2tlbigpIHsKICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICB2YXIgZ2V0Q29ubmVjdGlvbiA9IGZ1bmN0aW9uIGdldENvbm5lY3Rpb24oY29tbWl0bWVudCkgewogICAgcmV0dXJuIG5ldyB3ZWIzX2pzXzEuQ29ubmVjdGlvbihnZXRDbHVzdGVyVVJMKCksIHsKICAgICAgY29tbWl0bWVudDogY29tbWl0bWVudCAhPT0gbnVsbCAmJiBjb21taXRtZW50ICE9PSB2b2lkIDAgPyBjb21taXRtZW50IDogJ3Byb2Nlc3NlZCcsCiAgICAgIGZldGNoTWlkZGxld2FyZTogd2ViM190b2tlbl9hdXRoXzEudG9rZW5BdXRoRmV0Y2hNaWRkbGV3YXJlKHsKICAgICAgICAvLyB0b2tlbkV4cGlyeTogMCwKICAgICAgICBnZXRUb2tlbjogZ2V0VG9rZW4KICAgICAgfSkKICAgIH0pOwogIH07CgogIHZhciBzZXRDbHVzdGVyID0gZnVuY3Rpb24gc2V0Q2x1c3RlcihuZXdDbHVzdGVyKSB7CiAgICBjbHVzdGVyLnZhbHVlID0gbmV3Q2x1c3RlcjsgLy8gY2FwcGluZyBhdCAxMCBjaGFycyBkdWUgdG8gc2VjdXJpdHkgKG5vdCB0byBleHBvc2UgdGhlIHRva2VuKQoKICAgIGNvbnNvbGUubG9nKCJDbHVzdGVyIHVwZGF0ZWQsIG5vdyAiLmNvbmNhdChuZXdDbHVzdGVyLCAiICgiKS5jb25jYXQoZ2V0Q2x1c3RlclVSTCgpLnN1YnN0cigwLCAxMCksICIpIikpOwogIH07CgogIHJldHVybiB7CiAgICBjbHVzdGVyOiB2dWVfMS5yZWFkb25seShjbHVzdGVyKSwKICAgIGdldENsdXN0ZXJVUkw6IGdldENsdXN0ZXJVUkwsCiAgICBnZXRDb25uZWN0aW9uOiBnZXRDb25uZWN0aW9uLAogICAgc2V0Q2x1c3Rlcjogc2V0Q2x1c3RlcgogIH07Cn0KCmV4cG9ydHMuZGVmYXVsdCA9IHVzZUNsdXN0ZXI7"},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/composables/cluster.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,IAAY,OAAZ;;AAAA,CAAA,UAAY,OAAZ,EAAmB;AACjB,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,OAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,OAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACD,CALD,EAAY,OAAO,GAAP,OAAA,CAAA,OAAA,KAAA,OAAA,CAAA,OAAA,GAAO,EAAP,CAAZ;;AAOA,IAAM,iBAAiB,GAAG;AACxB,EAAA,OAAO,EAAE,OAAO,CAAC,GAAR,CAAY,mBAAZ,IAAmC,qCADpB;AAExB,EAAA,MAAM,EAAE,OAAO,CAAC,GAAR,CAAY,kBAAZ,IAAkC,+BAFlB;AAGxB,EAAA,OAAO,EAAE,OAAO,CAAC,GAAR,CAAY,mBAAZ,IAAmC,gCAHpB;AAIxB,EAAA,QAAQ,EAAE,OAAO,CAAC,GAAR,CAAY,oBAAZ,IAAoC;AAJtB,CAA1B;AAOA,IAAM,OAAO,GAAG,KAAA,CAAA,GAAA,CAAa,SAAA,CAAA,QAAA,CAAS,OAAtB,CAAhB;;AAEA,SAAwB,UAAxB,GAAkC;AAChC,MAAM,aAAa,GAAG,SAAhB,aAAgB;AAAA,WAAc,iBAAiB,CAAC,OAAO,CAAC,KAAT,CAA/B;AAAA,GAAtB;;AAEA,MAAM,QAAQ;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAER,OAAA,CAAA,OAAA,CAAM,GAAN,CAAU,OAAO,CAAC,GAAR,CAAY,kBAAtB,CAFQ;;AAAA;AAAA,6DAEmC,IAFnC,CAEwC,YAFxC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAR,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAIA,MAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,UAAD;AAAA,WACpB,IAAI,SAAA,CAAA,UAAJ,CAAe,aAAa,EAA5B,EAAgC;AAC9B,MAAA,UAAU,EAAE,UAAF,aAAE,UAAF,cAAE,UAAF,GAAgB,WADI;AAE9B,MAAA,eAAe,EAAE,iBAAA,CAAA,wBAAA,CAAyB;AACxC;AACA,QAAA,QAAQ,EAAR;AAFwC,OAAzB;AAFa,KAAhC,CADoB;AAAA,GAAtB;;AASA,MAAM,UAAU,GAAG,SAAb,UAAa,CAAC,UAAD,EAAwB;AACzC,IAAA,OAAO,CAAC,KAAR,GAAgB,UAAhB,CADyC,CAEzC;;AACA,IAAA,OAAO,CAAC,GAAR,gCAAoC,UAApC,eAAmD,aAAa,GAAG,MAAhB,CAAuB,CAAvB,EAA0B,EAA1B,CAAnD;AACD,GAJD;;AAMA,SAAO;AACL,IAAA,OAAO,EAAE,KAAA,CAAA,QAAA,CAAS,OAAT,CADJ;AAEL,IAAA,aAAa,EAAb,aAFK;AAGL,IAAA,aAAa,EAAb,aAHK;AAIL,IAAA,UAAU,EAAV;AAJK,GAAP;AAMD;;AA5BD,OAAA,CAAA,OAAA,GAAA,UAAA","sourcesContent":["import { readonly, ref } from 'vue';\nimport { Commitment, Connection } from '@solana/web3.js';\nimport { tokenAuthFetchMiddleware } from '@strata-foundation/web3-token-auth';\nimport axios from 'axios';\nimport { DEFAULTS } from '@/globals';\n\nexport enum Cluster {\n  Mainnet = 'mainnet',\n  Devnet = 'devnet',\n  Testnet = 'testnet',\n  Localnet = 'localnet',\n}\n\nconst clusterURLMapping = {\n  mainnet: process.env.VUE_APP_MAINNET_URL || 'https://api.mainnet-beta.solana.com',\n  devnet: process.env.VUE_APP_DEVNET_URL || 'https://api.devnet.solana.com',\n  testnet: process.env.VUE_APP_TESTNET_URL || 'https://api.testnet.solana.com',\n  localnet: process.env.VUE_APP_LOCALNET_URL || 'http://localhost:8899',\n};\n\nconst cluster = ref<Cluster>(DEFAULTS.CLUSTER as any);\n\nexport default function useCluster() {\n  const getClusterURL = (): string => clusterURLMapping[cluster.value];\n\n  const getToken = async (): Promise<string> =>\n    // @ts-ignore\n    (await axios.get(process.env.VUE_APP_GENGO_AUTH)).data.access_token;\n\n  const getConnection = (commitment?: Commitment): Connection =>\n    new Connection(getClusterURL(), {\n      commitment: commitment ?? 'processed',\n      fetchMiddleware: tokenAuthFetchMiddleware({\n        // tokenExpiry: 0,\n        getToken,\n      }),\n    });\n\n  const setCluster = (newCluster: Cluster) => {\n    cluster.value = newCluster;\n    // capping at 10 chars due to security (not to expose the token)\n    console.log(`Cluster updated, now ${newCluster} (${getClusterURL().substr(0, 10)})`);\n  };\n\n  return {\n    cluster: readonly(cluster),\n    getClusterURL,\n    getConnection,\n    setCluster,\n  };\n}\n"],"sourceRoot":""}]}