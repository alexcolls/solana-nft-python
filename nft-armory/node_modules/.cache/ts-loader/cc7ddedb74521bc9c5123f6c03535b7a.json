{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/src/common/NFTmint.ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/common/NFTmint.ts","mtime":1666703689729},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9hc3luY1RvR2VuZXJhdG9yID0gcmVxdWlyZSgiL2hvbWUvcXVhbnRpdW0vbGFicy9zb2xhbmEtbmZ0LXB5dGhvbi9uZnQtYXJtb3J5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IiKS5kZWZhdWx0OwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIik7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuTkZUTWludEVkaXRpb25Gcm9tTWFzdGVyID0gZXhwb3J0cy5ORlRNaW50TWFzdGVyID0gdm9pZCAwOwoKdmFyIHRzbGliXzEgPSByZXF1aXJlKCJ0c2xpYiIpOwoKdmFyIGpzXzEgPSByZXF1aXJlKCJAbWV0YXBsZXgvanMiKTsKCnZhciB1dGlsXzEgPSByZXF1aXJlKCIuL2hlbHBlcnMvdXRpbCIpOwoKdmFyIGNsdXN0ZXJfMSA9IHRzbGliXzEuX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoIkAvY29tcG9zYWJsZXMvY2x1c3RlciIpKTsKCnZhciBfY2x1c3Rlcl8xJGRlZmF1bHQgPSBjbHVzdGVyXzEuZGVmYXVsdCgpLAogICAgZ2V0Q29ubmVjdGlvbiA9IF9jbHVzdGVyXzEkZGVmYXVsdC5nZXRDb25uZWN0aW9uOwoKZnVuY3Rpb24gTkZUTWludE1hc3RlcihfeCwgX3gyLCBfeDMpIHsKICByZXR1cm4gX05GVE1pbnRNYXN0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX05GVE1pbnRNYXN0ZXIoKSB7CiAgX05GVE1pbnRNYXN0ZXIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUod2FsbGV0LCB1cmksIG1heFN1cHBseSkgewogICAgdmFyIGNvbm5lY3Rpb24sIHJlc3VsdCwgc3RyUmVzdWx0OwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBjb25uZWN0aW9uID0gZ2V0Q29ubmVjdGlvbigpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGpzXzEuYWN0aW9ucy5taW50TkZUKHsKICAgICAgICAgICAgICBjb25uZWN0aW9uOiBjb25uZWN0aW9uLAogICAgICAgICAgICAgIHdhbGxldDogd2FsbGV0LAogICAgICAgICAgICAgIHVyaTogdXJpLAogICAgICAgICAgICAgIG1heFN1cHBseTogbWF4U3VwcGx5CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgc3RyUmVzdWx0ID0gdXRpbF8xLnN0cmluZ2lmeVB1YmtleXNBbmRCTnNJbk9iamVjdChyZXN1bHQpOwogICAgICAgICAgICBjb25zb2xlLmxvZygnTWludGVkIGEgbmV3IG1hc3RlciBORlQ6Jywgc3RyUmVzdWx0KTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgc3RyUmVzdWx0KTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwogIHJldHVybiBfTkZUTWludE1hc3Rlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnRzLk5GVE1pbnRNYXN0ZXIgPSBORlRNaW50TWFzdGVyOwoKZnVuY3Rpb24gTkZUTWludEVkaXRpb25Gcm9tTWFzdGVyKF94NCwgX3g1LCBfeDYpIHsKICByZXR1cm4gX05GVE1pbnRFZGl0aW9uRnJvbU1hc3Rlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfTkZUTWludEVkaXRpb25Gcm9tTWFzdGVyKCkgewogIF9ORlRNaW50RWRpdGlvbkZyb21NYXN0ZXIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHdhbGxldCwgbWFzdGVyRWRpdGlvbk1pbnQsIHVwZGF0ZUF1dGhvcml0eSkgewogICAgdmFyIGNvbm5lY3Rpb24sIHJlc3VsdCwgc3RyUmVzdWx0OwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgY29ubmVjdGlvbiA9IGdldENvbm5lY3Rpb24oKTsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4ganNfMS5hY3Rpb25zLm1pbnRFZGl0aW9uRnJvbU1hc3Rlcih7CiAgICAgICAgICAgICAgY29ubmVjdGlvbjogY29ubmVjdGlvbiwKICAgICAgICAgICAgICB3YWxsZXQ6IHdhbGxldCwKICAgICAgICAgICAgICBtYXN0ZXJFZGl0aW9uTWludDogbWFzdGVyRWRpdGlvbk1pbnQsCiAgICAgICAgICAgICAgdXBkYXRlQXV0aG9yaXR5OiB1cGRhdGVBdXRob3JpdHkKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgc3RyUmVzdWx0ID0gdXRpbF8xLnN0cmluZ2lmeVB1YmtleXNBbmRCTnNJbk9iamVjdChyZXN1bHQpOwogICAgICAgICAgICBjb25zb2xlLmxvZygnTWludGVkIGEgbmV3IHByaW50IE5GVDonLCBzdHJSZXN1bHQpOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgc3RyUmVzdWx0KTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyKTsKICB9KSk7CiAgcmV0dXJuIF9ORlRNaW50RWRpdGlvbkZyb21NYXN0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZXhwb3J0cy5ORlRNaW50RWRpdGlvbkZyb21NYXN0ZXIgPSBORlRNaW50RWRpdGlvbkZyb21NYXN0ZXI7"},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/common/NFTmint.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,IAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AAEA,yBAA0B,SAAA,CAAA,OAAA,EAA1B;AAAA,IAAQ,aAAR,sBAAQ,aAAR;;SAEsB,a;;;;;2EAAf,iBAA6B,MAA7B,EAA6C,GAA7C,EAA0D,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,YAAA,UADD,GACc,aAAa,EAD3B;AAAA;AAAA,mBAEgB,IAAA,CAAA,OAAA,CAAQ,OAAR,CAAgB;AACnC,cAAA,UAAU,EAAV,UADmC;AAEnC,cAAA,MAAM,EAAN,MAFmC;AAGnC,cAAA,GAAG,EAAH,GAHmC;AAInC,cAAA,SAAS,EAAT;AAJmC,aAAhB,CAFhB;;AAAA;AAEC,YAAA,MAFD;AAQC,YAAA,SARD,GAQa,MAAA,CAAA,8BAAA,CAA+B,MAA/B,CARb;AASL,YAAA,OAAO,CAAC,GAAR,CAAY,0BAAZ,EAAwC,SAAxC;AATK,6CAUE,SAVF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAP,OAAA,CAAA,aAAA,GAAA,aAAA;;SAasB,wB;;;;;sFAAf,kBACL,MADK,EAEL,iBAFK,EAGL,eAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKC,YAAA,UALD,GAKc,aAAa,EAL3B;AAAA;AAAA,mBAMgB,IAAA,CAAA,OAAA,CAAQ,qBAAR,CAA8B;AACjD,cAAA,UAAU,EAAV,UADiD;AAEjD,cAAA,MAAM,EAAN,MAFiD;AAGjD,cAAA,iBAAiB,EAAjB,iBAHiD;AAIjD,cAAA,eAAe,EAAf;AAJiD,aAA9B,CANhB;;AAAA;AAMC,YAAA,MAND;AAYC,YAAA,SAZD,GAYa,MAAA,CAAA,8BAAA,CAA+B,MAA/B,CAZb;AAaL,YAAA,OAAO,CAAC,GAAR,CAAY,yBAAZ,EAAuC,SAAvC;AAbK,8CAcE,SAdF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAP,OAAA,CAAA,wBAAA,GAAA,wBAAA","sourcesContent":["import { actions, Wallet } from '@metaplex/js';\nimport { PublicKey } from '@solana/web3.js';\nimport { stringifyPubkeysAndBNsInObject } from './helpers/util';\nimport useCluster from '@/composables/cluster';\n\nconst { getConnection } = useCluster();\n\nexport async function NFTMintMaster(wallet: Wallet, uri: string, maxSupply?: number) {\n  const connection = getConnection();\n  const result = await actions.mintNFT({\n    connection,\n    wallet,\n    uri,\n    maxSupply,\n  });\n  const strResult = stringifyPubkeysAndBNsInObject(result);\n  console.log('Minted a new master NFT:', strResult);\n  return strResult;\n}\n\nexport async function NFTMintEditionFromMaster(\n  wallet: Wallet,\n  masterEditionMint: PublicKey,\n  updateAuthority?: PublicKey\n) {\n  const connection = getConnection();\n  const result = await actions.mintEditionFromMaster({\n    connection,\n    wallet,\n    masterEditionMint,\n    updateAuthority,\n  });\n  const strResult = stringifyPubkeysAndBNsInObject(result);\n  console.log('Minted a new print NFT:', strResult);\n  return strResult;\n}\n"],"sourceRoot":""}]}