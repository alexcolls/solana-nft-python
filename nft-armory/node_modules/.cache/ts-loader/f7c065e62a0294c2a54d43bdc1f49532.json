{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js!/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js??ref--14-2!/home/quantium/labs/solana-nft-python/nft-armory/src/composables/loading.ts","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/composables/loading.ts","mtime":1666703689733},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/babel.config.js","mtime":1666703689725},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmVzdGltYXRlTkZUTG9hZFRpbWUgPSBleHBvcnRzLkxvYWRTdGF0dXMgPSB2b2lkIDA7Cgp2YXIgdnVlXzEgPSByZXF1aXJlKCJ2dWUiKTsKCnZhciBjb3JlXzEgPSByZXF1aXJlKCJAdnVldXNlL2NvcmUiKTsKCnZhciBMb2FkU3RhdHVzOwoKKGZ1bmN0aW9uIChMb2FkU3RhdHVzKSB7CiAgTG9hZFN0YXR1c1tMb2FkU3RhdHVzWyJJZGxlIl0gPSAwXSA9ICJJZGxlIjsKICBMb2FkU3RhdHVzW0xvYWRTdGF0dXNbIkxvYWRpbmciXSA9IDFdID0gIkxvYWRpbmciOwogIExvYWRTdGF0dXNbTG9hZFN0YXR1c1siRXJyb3IiXSA9IDJdID0gIkVycm9yIjsKICBMb2FkU3RhdHVzW0xvYWRTdGF0dXNbIlN1Y2Nlc3MiXSA9IDNdID0gIlN1Y2Nlc3MiOwp9KShMb2FkU3RhdHVzID0gZXhwb3J0cy5Mb2FkU3RhdHVzIHx8IChleHBvcnRzLkxvYWRTdGF0dXMgPSB7fSkpOwoKZnVuY3Rpb24gdXNlTG9hZGluZygpIHsKICB2YXIgc3RhdHVzID0gdnVlXzEucmVmKExvYWRTdGF0dXMuSWRsZSk7CiAgdmFyIHByb2dyZXNzID0gdnVlXzEucmVmKDApOwogIHZhciB0ZXh0ID0gdnVlXzEucmVmKCdMb2FkaW5nLi4uJyk7CiAgdmFyIGlzSWRsZSA9IHZ1ZV8xLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBzdGF0dXMudmFsdWUgPT09IExvYWRTdGF0dXMuSWRsZTsKICB9KTsKICB2YXIgaXNMb2FkaW5nID0gdnVlXzEuY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHN0YXR1cy52YWx1ZSA9PT0gTG9hZFN0YXR1cy5Mb2FkaW5nOwogIH0pOwogIHZhciBpc0Vycm9yID0gdnVlXzEuY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHN0YXR1cy52YWx1ZSA9PT0gTG9hZFN0YXR1cy5FcnJvcjsKICB9KTsKICB2YXIgaXNTdWNjZXNzID0gdnVlXzEuY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHN0YXR1cy52YWx1ZSA9PT0gTG9hZFN0YXR1cy5TdWNjZXNzOwogIH0pOwogIHZhciBpc09rID0gdnVlXzEuY29tcHV0ZWQoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHN0YXR1cy52YWx1ZSA9PT0gTG9hZFN0YXR1cy5JZGxlIHx8IHN0YXR1cy52YWx1ZSA9PT0gTG9hZFN0YXR1cy5TdWNjZXNzOwogIH0pOyAvLyB0b2RvIGlzIHRoaXMgdGhlIGJlc3Qgc29sdXRpb24/IEZlZWxzIGhhY2t5Li4uCgogIHZhciBjdXJyZW50VmVyc2lvbiA9IDA7CgogIHZhciBzdGFydFRpY2tpbmcgPSBmdW5jdGlvbiBzdGFydFRpY2tpbmcobWF4LCBwYXNzZWRWZXJzaW9uKSB7CiAgICB2YXIgY291bnRlciA9IGNvcmVfMS51c2VJbnRlcnZhbCgxMDAwKTsKICAgIGNvcmVfMS53YXRjaEF0TW9zdChjb3VudGVyLCBmdW5jdGlvbiAoKSB7CiAgICAgIC8vIGlmIGZvciBzb21lIHJlYXNvbiBwcm9ncmVzcyBiYXIganVtcHMgYWJvdmUsIHdlIGRvbid0IHdhbnQgdG8ga2VlcCBpbmNyZW1lbnRpbmcKICAgICAgLy8gYWxzbyB1c2UgdmVyc2lvbmluZyB0byBzdG9wIG9sZCBjb3VudGVycwogICAgICBpZiAocHJvZ3Jlc3MudmFsdWUgPiBtYXggfHwgcGFzc2VkVmVyc2lvbiAhPT0gY3VycmVudFZlcnNpb24pIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHByb2dyZXNzLnZhbHVlICs9IDI7CiAgICB9LCAvLyB0aGlzIGVuc3VyZXMgd2Ugc3RvcCBhZnRlciByZXF1aXJlZCBudW1iZXIgb2YgdGltZXMKICAgIHsKICAgICAgY291bnQ6IE1hdGgubWF4KG1heCAtIHByb2dyZXNzLnZhbHVlLCAwKQogICAgfSk7CiAgfTsKCiAgdmFyIHVwZGF0ZUxvYWRpbmcgPSBmdW5jdGlvbiB1cGRhdGVMb2FkaW5nKCkgewogICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LAogICAgICAgIG5ld1N0YXR1cyA9IF9yZWYubmV3U3RhdHVzLAogICAgICAgIG5ld1Byb2dyZXNzID0gX3JlZi5uZXdQcm9ncmVzcywKICAgICAgICBtYXhQcm9ncmVzcyA9IF9yZWYubWF4UHJvZ3Jlc3MsCiAgICAgICAgbmV3VGV4dCA9IF9yZWYubmV3VGV4dDsKCiAgICBzdGF0dXMudmFsdWUgPSBuZXdTdGF0dXM7CiAgICBwcm9ncmVzcy52YWx1ZSA9IG5ld1Byb2dyZXNzOwogICAgdGV4dC52YWx1ZSA9IG5ld1RleHQ7CiAgICBjdXJyZW50VmVyc2lvbiArPSAxOwogICAgc3RhcnRUaWNraW5nKG1heFByb2dyZXNzLCBjdXJyZW50VmVyc2lvbik7CiAgfTsKCiAgdmFyIHVwZGF0ZUxvYWRpbmdTdGRFcnIgPSBmdW5jdGlvbiB1cGRhdGVMb2FkaW5nU3RkRXJyKGUpIHsKICAgIHVwZGF0ZUxvYWRpbmcoewogICAgICBuZXdTdGF0dXM6IExvYWRTdGF0dXMuRXJyb3IsCiAgICAgIG5ld1Byb2dyZXNzOiAwLAogICAgICBtYXhQcm9ncmVzczogMCwKICAgICAgbmV3VGV4dDogIlVoIG9oIHNvbWV0aGluZyB3ZW50IHdyb25nIC0gIi5jb25jYXQoZSkKICAgIH0pOwogIH07CgogIHZhciB1cGRhdGVMb2FkaW5nU3RkV2luID0gZnVuY3Rpb24gdXBkYXRlTG9hZGluZ1N0ZFdpbigpIHsKICAgIHVwZGF0ZUxvYWRpbmcoewogICAgICBuZXdTdGF0dXM6IExvYWRTdGF0dXMuU3VjY2VzcywKICAgICAgbmV3UHJvZ3Jlc3M6IDAsCiAgICAgIG1heFByb2dyZXNzOiAwLAogICAgICBuZXdUZXh0OiAnU3VjY2Vzc2Z1bGx5IGxvYWRlZCEnCiAgICB9KTsKICB9OwoKICByZXR1cm4gewogICAgc3RhdHVzOiB2dWVfMS5yZWFkb25seShzdGF0dXMpLAogICAgcHJvZ3Jlc3M6IHZ1ZV8xLnJlYWRvbmx5KHByb2dyZXNzKSwKICAgIHRleHQ6IHZ1ZV8xLnJlYWRvbmx5KHRleHQpLAogICAgaXNJZGxlOiBpc0lkbGUsCiAgICBpc0xvYWRpbmc6IGlzTG9hZGluZywKICAgIGlzRXJyb3I6IGlzRXJyb3IsCiAgICBpc1N1Y2Nlc3M6IGlzU3VjY2VzcywKICAgIGlzT2s6IGlzT2ssCiAgICB1cGRhdGVMb2FkaW5nOiB1cGRhdGVMb2FkaW5nLAogICAgdXBkYXRlTG9hZGluZ1N0ZEVycjogdXBkYXRlTG9hZGluZ1N0ZEVyciwKICAgIHVwZGF0ZUxvYWRpbmdTdGRXaW46IHVwZGF0ZUxvYWRpbmdTdGRXaW4KICB9Owp9CgpleHBvcnRzLmRlZmF1bHQgPSB1c2VMb2FkaW5nOwoKZnVuY3Rpb24gZXN0aW1hdGVORlRMb2FkVGltZShjb3VudCkgewogIC8vIGZpcnN0IDEwMCBORlRzID0gPDFtaW4sIHRoZW4gMW1pbiBleHRyYSBmb3IgZWFjaCAyNTAwIGV4dHJhIDFtaW4KICByZXR1cm4gMSArIE1hdGguZmxvb3IoY291bnQgLyAyMDAwKTsKfQoKZXhwb3J0cy5lc3RpbWF0ZU5GVExvYWRUaW1lID0gZXN0aW1hdGVORlRMb2FkVGltZTs="},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/composables/loading.ts"],"names":[],"mappings":"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","sourcesContent":["import { computed, readonly, ref, watch } from 'vue';\nimport { useInterval, watchAtMost } from '@vueuse/core';\n\nexport enum LoadStatus {\n  Idle,\n  Loading,\n  Error,\n  Success,\n}\n\nexport interface IUpdateLoadingParams {\n  newStatus: LoadStatus;\n  newProgress: number;\n  maxProgress: number;\n  newText: string;\n}\n\nexport default function useLoading() {\n  const status = ref<LoadStatus>(LoadStatus.Idle);\n  const progress = ref<number>(0);\n  const text = ref<string>('Loading...');\n\n  const isIdle = computed(() => status.value === LoadStatus.Idle);\n  const isLoading = computed(() => status.value === LoadStatus.Loading);\n  const isError = computed(() => status.value === LoadStatus.Error);\n  const isSuccess = computed(() => status.value === LoadStatus.Success);\n  const isOk = computed(\n    () => status.value === LoadStatus.Idle || status.value === LoadStatus.Success\n  );\n\n  // todo is this the best solution? Feels hacky...\n  let currentVersion = 0;\n  const startTicking = (max: number, passedVersion: number) => {\n    const counter = useInterval(1000);\n    watchAtMost(\n      counter,\n      () => {\n        // if for some reason progress bar jumps above, we don't want to keep incrementing\n        // also use versioning to stop old counters\n        if (progress.value > max || passedVersion !== currentVersion) {\n          return;\n        }\n        progress.value += 2;\n      },\n      // this ensures we stop after required number of times\n      { count: Math.max(max - progress.value, 0) }\n    );\n  };\n\n  const updateLoading = (\n    { newStatus, newProgress, maxProgress, newText } = {} as IUpdateLoadingParams\n  ) => {\n    status.value = newStatus;\n    progress.value = newProgress;\n    text.value = newText;\n    currentVersion += 1;\n    startTicking(maxProgress, currentVersion);\n  };\n\n  const updateLoadingStdErr = (e: Error) => {\n    updateLoading({\n      newStatus: LoadStatus.Error,\n      newProgress: 0,\n      maxProgress: 0,\n      newText: `Uh oh something went wrong - ${e}`,\n    });\n  };\n\n  const updateLoadingStdWin = () => {\n    updateLoading({\n      newStatus: LoadStatus.Success,\n      newProgress: 0,\n      maxProgress: 0,\n      newText: 'Successfully loaded!',\n    });\n  };\n\n  return {\n    status: readonly(status),\n    progress: readonly(progress),\n    text: readonly(text),\n    isIdle,\n    isLoading,\n    isError,\n    isSuccess,\n    isOk,\n    updateLoading,\n    updateLoadingStdErr,\n    updateLoadingStdWin,\n  };\n}\n\nexport function estimateNFTLoadTime(count: number) {\n  // first 100 NFTs = <1min, then 1min extra for each 2500 extra 1min\n  return 1 + Math.floor(count / 2000);\n}\n"],"sourceRoot":""}]}