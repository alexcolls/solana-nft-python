{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/quantium/labs/solana-nft-python/nft-armory/src/views/ViewView.vue?vue&type=template&id=698d1c24&ts=true","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/views/ViewView.vue","mtime":1666703689733},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1666703777304},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js","mtime":1666703776480}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdj4KICAgIDwhLS1hbGwgdGhlIGNvbmZpZyBzdHVmZi0tPgogICAgPENvbmZpZ1BhbmUgLz4KICAgIDxORlRWaWV3Rm9ybSA6aXMtbG9hZGluZz0iaXNMb2FkaW5nIiBAc3VibWl0LWZvcm09ImhhbmRsZVN1Ym1pdEZvcm0iPgogICAgICA8ZGl2IHYtaWY9Ik5GVHMubGVuZ3RoIiBjbGFzcz0iZmxleCI+CiAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuZXMtYnRuIG1yLTIiIEBjbGljaz0iY29weVNoYXJlTGluayI+CiAgICAgICAgICB7eyBjb3B5VGV4dCB9fQogICAgICAgIDwvYnV0dG9uPgogICAgICAgIDxidXR0b24KICAgICAgICAgIHR5cGU9ImJ1dHRvbiIKICAgICAgICAgIGNsYXNzPSJuZXMtYnRuIgogICAgICAgICAgOmNsYXNzPSJ7ICdpcy1kaXNhYmxlZCc6IGRpc2FibGVFeHBvcnQgfSIKICAgICAgICAgIEBjbGljaz0iZXhwb3J0TkZUcyIKICAgICAgICAgIDpkaXNhYmxlZD0iZGlzYWJsZUV4cG9ydCIKICAgICAgICA+CiAgICAgICAgICB7eyBleHBvcnRCdG5UZXh0IH19CiAgICAgICAgPC9idXR0b24+CiAgICAgICAgPFF1ZXN0aW9uTWFyayBjbGFzcz0ibWwtMSBtdC0zIiBAY2xpY2s9InNob3dNb2RhbCgndG9vbHRpcEV4cG9ydCcpIiAvPgogICAgICA8L2Rpdj4KICAgIDwvTkZUVmlld0Zvcm0+CgogICAgPCEtLXBlciBORlQgZGlzcGxheS0tPgogICAgPExvYWRpbmdCYXIgdi1pZj0iaXNMb2FkaW5nIiA6cHJvZ3Jlc3M9InByb2dyZXNzIiA6dGV4dD0idGV4dCIgY2xhc3M9Im15LTUiIC8+CiAgICA8Tm90aWZ5RXJyb3Igdi1lbHNlLWlmPSJpc0Vycm9yIiBjbGFzcz0ibXQtNSI+e3sgdGV4dCB9fTwvTm90aWZ5RXJyb3I+CiAgICA8ZGl2IHYtZWxzZT4KICAgICAgPE5GVFZpZXdDYXJkIHYtZm9yPSJuIGluIE5GVHMiIDprZXk9Im4ubWludCIgOm49Im4iPjwvTkZUVmlld0NhcmQ+CiAgICA8L2Rpdj4KCiAgICA8IS0tbW9kYWxzLS0+CiAgICA8TW9kYWxXaW5kb3cKICAgICAgdi1pZj0iaXNNb2RhbFZpc2libGUoJ3Rvb2x0aXBFeHBvcnQnKSIKICAgICAgdGl0bGU9IldlbiBleHBvcnQ/PyIKICAgICAgQGhpZGUtbW9kYWw9ImhpZGVNb2RhbCgndG9vbHRpcEV4cG9ydCcpIgogICAgPgogICAgICA8Q29udGVudFRvb2x0aXBFeHBvcnQgLz4KICAgIDwvTW9kYWxXaW5kb3c+CgogICAgPCEtLW11c3Qgc2l0IGF0IHRoZSB2ZXJ5IGJvdHRvbS0tPgogICAgPGluZmluaXRlLWxvYWRpbmcKICAgICAgQGluZmluaXRlPSJpbmZpbml0ZUhhbmRsZXIiCiAgICAgIDppZGVudGlmaWVyPSIKICAgICAgICArbmV3IERhdGUoKSAvL25lZWRzIHRvIGJlIHNvbWV0aGluZyB0aHRhIGR5bmFtaWNhbGx5IHVwZGF0ZXMsIG9yIHdvbid0IHdvcmsKICAgICAgIgogICAgICBzcGlubmVyPSJzcGlyYWwiCiAgICA+PC9pbmZpbml0ZS1sb2FkaW5nPgogIDwvZGl2Pgo="},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/views/ViewView.vue"],"names":[],"mappings":"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","file":"/home/quantium/labs/solana-nft-python/nft-armory/src/views/ViewView.vue","sourceRoot":"","sourcesContent":["<template>\n  <div>\n    <!--all the config stuff-->\n    <ConfigPane />\n    <NFTViewForm :is-loading=\"isLoading\" @submit-form=\"handleSubmitForm\">\n      <div v-if=\"NFTs.length\" class=\"flex\">\n        <button type=\"button\" class=\"nes-btn mr-2\" @click=\"copyShareLink\">\n          {{ copyText }}\n        </button>\n        <button\n          type=\"button\"\n          class=\"nes-btn\"\n          :class=\"{ 'is-disabled': disableExport }\"\n          @click=\"exportNFTs\"\n          :disabled=\"disableExport\"\n        >\n          {{ exportBtnText }}\n        </button>\n        <QuestionMark class=\"ml-1 mt-3\" @click=\"showModal('tooltipExport')\" />\n      </div>\n    </NFTViewForm>\n\n    <!--per NFT display-->\n    <LoadingBar v-if=\"isLoading\" :progress=\"progress\" :text=\"text\" class=\"my-5\" />\n    <NotifyError v-else-if=\"isError\" class=\"mt-5\">{{ text }}</NotifyError>\n    <div v-else>\n      <NFTViewCard v-for=\"n in NFTs\" :key=\"n.mint\" :n=\"n\"></NFTViewCard>\n    </div>\n\n    <!--modals-->\n    <ModalWindow\n      v-if=\"isModalVisible('tooltipExport')\"\n      title=\"Wen export??\"\n      @hide-modal=\"hideModal('tooltipExport')\"\n    >\n      <ContentTooltipExport />\n    </ModalWindow>\n\n    <!--must sit at the very bottom-->\n    <infinite-loading\n      @infinite=\"infiniteHandler\"\n      :identifier=\"\n        +new Date() //needs to be something thta dynamically updates, or won't work\n      \"\n      spinner=\"spiral\"\n    ></infinite-loading>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref, watch } from 'vue';\nimport InfiniteLoading from 'vue-infinite-loading';\nimport 'vue-json-pretty/lib/styles.css';\nimport ConfigPane from '@/components/ConfigPane.vue';\nimport LoadingBar from '@/components/LoadingBar.vue';\nimport { NFTGet } from '@/common/NFTget';\nimport NFTViewCard from '@/components/NFTViewCard.vue';\nimport useLoading, { LoadStatus } from '@/composables/loading';\nimport { EE, ERR_NO_NFTS } from '@/globals';\nimport { INFT, INFTParams } from '@/common/helpers/types';\nimport NFTViewForm from '@/components/NFTViewForm.vue';\nimport useDownload from '@/composables/download';\nimport useCopy from '@/composables/copy';\nimport NotifyError from '@/components/notifications/NotifyError.vue';\nimport QuestionMark from '@/components/QuestionMark.vue';\nimport ModalWindow from '@/components/ModalWindow.vue';\nimport ContentTooltipExport from '@/components/content/tooltip/ContentTooltipExport.vue';\nimport useModal from '@/composables/modal';\n\nexport default defineComponent({\n  components: {\n    ContentTooltipExport,\n    ModalWindow,\n    QuestionMark,\n    NotifyError,\n    NFTViewForm,\n    NFTViewCard,\n    LoadingBar,\n    ConfigPane,\n    InfiniteLoading,\n  },\n  setup() {\n    const {\n      progress,\n      text,\n      isLoading,\n      isError,\n      updateLoading,\n      updateLoadingStdErr,\n      updateLoadingStdWin,\n    } = useLoading();\n    const displayedNFTs = ref<INFT[]>([]); // this is what's shown on FE\n    const allFetchedNFTs = ref<INFT[]>([]); // this is everything fetched in mem\n    const fetchParams = ref<INFTParams | null>(null);\n    const NFTCount = computed(() => displayedNFTs.value.length + allFetchedNFTs.value.length);\n\n    const getNextBatch = (size: number): INFT[] => {\n      if (allFetchedNFTs.value.length === 0) {\n        return [];\n      }\n      if (allFetchedNFTs.value.length > size) {\n        return allFetchedNFTs.value.splice(0, size);\n      }\n      return allFetchedNFTs.value.splice(0, allFetchedNFTs.value.length);\n    };\n\n    const fetchNFTs = (params: INFTParams) => {\n      updateLoading({\n        newStatus: LoadStatus.Loading,\n        newProgress: 0,\n        maxProgress: 50,\n        newText: 'Looking for NFTs... ETA: <1 min',\n      });\n\n      EE.removeAllListeners();\n      EE.on('loading', updateLoading);\n\n      // clear for new fetch\n      displayedNFTs.value = [];\n      allFetchedNFTs.value = [];\n\n      NFTGet(params)\n        .then((fetchedNFTs) => {\n          if (fetchedNFTs.length) {\n            allFetchedNFTs.value = fetchedNFTs;\n            const nextBatch = getNextBatch(10);\n            displayedNFTs.value.push(...nextBatch);\n            updateLoadingStdWin();\n          } else {\n            updateLoadingStdErr(ERR_NO_NFTS);\n          }\n        })\n        .catch(updateLoadingStdErr);\n    };\n\n    const handleSubmitForm = (params: INFTParams) => {\n      fetchParams.value = params;\n      fetchNFTs(params);\n    };\n\n    // --------------------------------------- display\n    const infiniteHandler = ($state: any) => {\n      const nextBatch = getNextBatch(10);\n      if (nextBatch.length) {\n        displayedNFTs.value.push(...nextBatch);\n        $state.loaded();\n      } else {\n        $state.complete();\n      }\n    };\n\n    // --------------------------------------- export\n    const { exportJSONZip } = useDownload();\n    const exportBtnText = ref(`Export ${NFTCount.value} NFTs`);\n    const disableExport = ref(false);\n    watch(NFTCount, (newCount) => {\n      exportBtnText.value = `Export ${newCount} NFTs`;\n    });\n\n    const parseParams = (): [string, string] => {\n      let returnKey: string;\n      let returnPk: string;\n      for (const [k, v] of Object.entries(fetchParams.value!)) {\n        if (v && v instanceof Array) {\n          returnKey = k;\n          returnPk = v[0].toBase58(); // get the first creator\n        } else if (v) {\n          returnKey = k;\n          returnPk = v.toBase58();\n        }\n      }\n      return [returnKey!, returnPk!];\n    };\n\n    const doneExportingCallback = () => {\n      disableExport.value = false;\n      exportBtnText.value = `Export ${NFTCount.value} NFTs`;\n    };\n\n    const exportNFTs = () => {\n      disableExport.value = true;\n      exportBtnText.value = 'preparing...';\n      const allNFTs = displayedNFTs.value.concat(allFetchedNFTs.value);\n      const now = +new Date();\n      const [k, v] = parseParams();\n      exportJSONZip(allNFTs, 'mint', `${k}-${v}-${now}`, doneExportingCallback);\n    };\n\n    // --------------------------------------- sharing\n    const { copyText, setCopyText, doCopy } = useCopy();\n    setCopyText('Share Link');\n\n    const copyShareLink = async () => {\n      const host = window.location.origin;\n      if (fetchParams.value!.owner) {\n        await doCopy(`${host}/view/address/${fetchParams.value!.owner.toBase58()}`);\n      } else if (fetchParams.value!.creator) {\n        await doCopy(`${host}/view/creator/${fetchParams.value!.creator.toBase58()}`);\n      } else if (fetchParams.value!.updateAuthority) {\n        await doCopy(`${host}/view/authority/${fetchParams.value!.updateAuthority.toBase58()}`);\n      } else if (fetchParams.value!.mint) {\n        await doCopy(`${host}/view/mint/${fetchParams.value!.mint.toBase58()}`);\n      }\n    };\n\n    // --------------------------------------- modal\n    const { registerModal, isModalVisible, showModal, hideModal } = useModal();\n    registerModal('tooltipExport');\n\n    return {\n      NFTs: displayedNFTs,\n      progress,\n      text,\n      isLoading,\n      isError,\n      exportNFTs,\n      handleSubmitForm,\n      infiniteHandler,\n      // export\n      exportBtnText,\n      disableExport,\n      // share\n      copyText,\n      copyShareLink,\n      doCopy,\n      // modal\n      isModalVisible,\n      showModal,\n      hideModal,\n    };\n  },\n});\n</script>\n\n<style>\n/*temp hackaround...*/\n.infinite-status-prompt {\n  @apply text-white !important;\n}\n</style>\n"]}]}