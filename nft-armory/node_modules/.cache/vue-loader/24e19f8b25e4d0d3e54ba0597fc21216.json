{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/quantium/labs/solana-nft-python/nft-armory/src/components/ConfigPane.vue?vue&type=template&id=36e30efa&ts=true","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/components/ConfigPane.vue","mtime":1666703689729},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1666703777304},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js","mtime":1666703776480}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0iZmxleCBqdXN0aWZ5LWNlbnRlciBtYi0xMCI+CiAgICA8ZGl2IGNsYXNzPSJuZXMtc2VsZWN0IGlzLWRhcmsgZmxleC0xIj4KICAgICAgPHNlbGVjdCByZXF1aXJlZCBpZD0iY2x1c3RlciIgdi1tb2RlbD0iY2hvc2VuQ2x1c3RlciI+CiAgICAgICAgPG9wdGlvbiA6dmFsdWU9IkNsdXN0ZXIuTWFpbm5ldCI+TWFpbm5ldDwvb3B0aW9uPgogICAgICAgIDxvcHRpb24gOnZhbHVlPSJDbHVzdGVyLkRldm5ldCI+RGV2bmV0PC9vcHRpb24+CiAgICAgICAgPG9wdGlvbiA6dmFsdWU9IkNsdXN0ZXIuVGVzdG5ldCI+VGVzdG5ldDwvb3B0aW9uPgogICAgICAgIDxvcHRpb24gOnZhbHVlPSJDbHVzdGVyLkxvY2FsbmV0Ij5Mb2NhbG5ldDwvb3B0aW9uPgogICAgICA8L3NlbGVjdD4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ibmVzLXNlbGVjdCBpcy1kYXJrIGZsZXgtMSI+CiAgICAgIDxzZWxlY3QgcmVxdWlyZWQgaWQ9IndhbGxldCIgdi1tb2RlbD0iY2hvc2VuV2FsbGV0Ij4KICAgICAgICA8b3B0aW9uIGNsYXNzPSJ0ZXh0LWdyYXktNTAwIiA6dmFsdWU9Im51bGwiPkNob29zZSB3YWxsZXQuLjwvb3B0aW9uPgogICAgICAgIDxvcHRpb24gOnZhbHVlPSJXYWxsZXROYW1lLlBoYW50b20iPlBoYW50b208L29wdGlvbj4KICAgICAgICA8b3B0aW9uIDp2YWx1ZT0iV2FsbGV0TmFtZS5Tb2xsZXQiPlNvbGxldDwvb3B0aW9uPgogICAgICAgIDxvcHRpb24gOnZhbHVlPSJXYWxsZXROYW1lLlNvbGxldEV4dGVuc2lvbiI+U29sbGV0IEV4dGVuc2lvbjwvb3B0aW9uPgogICAgICAgIDxvcHRpb24gOnZhbHVlPSJXYWxsZXROYW1lLlNvbGZsYXJlIj5Tb2xmbGFyZTwvb3B0aW9uPgogICAgICAgIDxvcHRpb24gOnZhbHVlPSJXYWxsZXROYW1lLlNvbGZsYXJlV2ViIj5Tb2xmbGFyZSBXZWI8L29wdGlvbj4KICAgICAgPC9zZWxlY3Q+CiAgICA8L2Rpdj4KICA8L2Rpdj4K"},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/components/ConfigPane.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACV,CAAC,CAAC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACV,CAAC,CAAC,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/quantium/labs/solana-nft-python/nft-armory/src/components/ConfigPane.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"flex justify-center mb-10\">\n    <div class=\"nes-select is-dark flex-1\">\n      <select required id=\"cluster\" v-model=\"chosenCluster\">\n        <option :value=\"Cluster.Mainnet\">Mainnet</option>\n        <option :value=\"Cluster.Devnet\">Devnet</option>\n        <option :value=\"Cluster.Testnet\">Testnet</option>\n        <option :value=\"Cluster.Localnet\">Localnet</option>\n      </select>\n    </div>\n    <div class=\"nes-select is-dark flex-1\">\n      <select required id=\"wallet\" v-model=\"chosenWallet\">\n        <option class=\"text-gray-500\" :value=\"null\">Choose wallet..</option>\n        <option :value=\"WalletName.Phantom\">Phantom</option>\n        <option :value=\"WalletName.Sollet\">Sollet</option>\n        <option :value=\"WalletName.SolletExtension\">Sollet Extension</option>\n        <option :value=\"WalletName.Solflare\">Solflare</option>\n        <option :value=\"WalletName.SolflareWeb\">Solflare Web</option>\n      </select>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue';\nimport { WalletName } from '@solana/wallet-adapter-wallets';\nimport useCluster, { Cluster } from '@/composables/cluster';\nimport useWallet from '@/composables/wallet';\n\nexport default defineComponent({\n  setup() {\n    // cluster\n    const { cluster, setCluster, getClusterURL } = useCluster();\n    const chosenCluster = computed({\n      get() {\n        return cluster.value;\n      },\n      set(newVal: Cluster) {\n        setCluster(newVal);\n      },\n    });\n\n    // wallet\n    const { getWalletName, setWallet } = useWallet();\n    const chosenWallet = computed({\n      get() {\n        return getWalletName();\n      },\n      set(newVal: WalletName | null) {\n        setWallet(newVal, getClusterURL());\n      },\n    });\n\n    return {\n      Cluster,\n      chosenCluster,\n      WalletName,\n      chosenWallet,\n    };\n  },\n});\n</script>\n\n<style scoped></style>\n"]}]}