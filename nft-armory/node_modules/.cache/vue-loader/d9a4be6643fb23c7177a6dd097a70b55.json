{"remainingRequest":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTUpdateForm.vue?vue&type=template&id=f0ece8ee&ts=true","dependencies":[{"path":"/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTUpdateForm.vue","mtime":1666703689733},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/babel-loader/lib/index.js","mtime":1666703776480},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/ts-loader/index.js","mtime":1666703778256},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1666703777304},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/cache-loader/dist/cjs.js","mtime":1666703775764},{"path":"/home/quantium/labs/solana-nft-python/nft-armory/node_modules/vue-loader-v16/dist/index.js","mtime":1666703776480}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdj4KICAgIDxmb3JtIEBzdWJtaXQucHJldmVudD0idXBkYXRlTkZUIj4KICAgICAgPGRpdiBjbGFzcz0ibmVzLWZpZWxkIj4KICAgICAgICA8ZGl2PjxsYWJlbCBmb3I9ImVkaXRpb25NaW50Ij5ORlQgTWludDo8L2xhYmVsPjwvZGl2PgogICAgICAgIDxpbnB1dAogICAgICAgICAgdHlwZT0idGV4dCIKICAgICAgICAgIGlkPSJlZGl0aW9uTWludCIKICAgICAgICAgIGNsYXNzPSJuZXMtaW5wdXQiCiAgICAgICAgICB2LW1vZGVsPSJlZGl0aW9uTWludCIKICAgICAgICAgIDpwbGFjZWhvbGRlcj0iREVGQVVMVFMuTUFTVEVSX01JTlQiCiAgICAgICAgLz4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Im5lcy1maWVsZCBtdC01Ij4KICAgICAgICA8ZGl2PgogICAgICAgICAgPGxhYmVsIGZvcj0ibmV3TWV0YWRhdGFEYXRhIj5OZXcgTWV0YWRhdGEgYXMgSlNPTiAob3B0aW9uYWwpOjwvbGFiZWw+CiAgICAgICAgICA8UXVlc3Rpb25NYXJrIEBjbGljaz0ic2hvd01vZGFsKCd0b29sdGlwTWV0YWRhdGEnKSIgLz4KICAgICAgICA8L2Rpdj4KICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgIHJvd3M9IjUiCiAgICAgICAgICBpZD0ibmV3TWV0YWRhdGFEYXRhIgogICAgICAgICAgY2xhc3M9Im5lcy1pbnB1dCIKICAgICAgICAgIHYtbW9kZWw9Im5ld01ldGFkYXRhRGF0YSIKICAgICAgICAgIDpwbGFjZWhvbGRlcj0iREVGQVVMVFMuTUVUQURBVEEiCiAgICAgICAgPjwvdGV4dGFyZWE+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJuZXMtZmllbGQgbXQtNSI+CiAgICAgICAgPGRpdj48bGFiZWwgZm9yPSJuZXdVcGRhdGVBdXRob3JpdHkiPk5ldyBVcGRhdGUgQXV0aG9yaXR5IChvcHRpb25hbCk6PC9sYWJlbD48L2Rpdj4KICAgICAgICA8aW5wdXQKICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICBpZD0ibmV3VXBkYXRlQXV0aG9yaXR5IgogICAgICAgICAgY2xhc3M9Im5lcy1pbnB1dCIKICAgICAgICAgIHYtbW9kZWw9Im5ld1VwZGF0ZUF1dGhvcml0eSIKICAgICAgICAgIDpwbGFjZWhvbGRlcj0iREVGQVVMVFMuVVBEQVRFX0FVVEhPUklUWSIKICAgICAgICAvPgogICAgICA8L2Rpdj4KICAgICAgPGRpdj4KICAgICAgICA8bGFiZWwgZm9yPSJwcmltYXJ5U2FsZUhhcHBlbmVkIiBjbGFzcz0ibXQtNSI+UHJpbWFyeSBTYWxlIEhhcHBlbmVkPyAob3B0aW9uYWwpOjwvbGFiZWw+CiAgICAgICAgPFF1ZXN0aW9uTWFyayBleHRlcm5hbD0iaHR0cHM6Ly9kb2NzLm1ldGFwbGV4LmNvbS9uZnQtc3RhbmRhcmQjdG9rZW4tbWV0YWRhdGEtcHJvZ3JhbSIgLz4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Im5lcy1zZWxlY3QiPgogICAgICAgIDxzZWxlY3QgcmVxdWlyZWQgaWQ9InByaW1hcnlTYWxlSGFwcGVuZWQiIHYtbW9kZWw9InByaW1hcnlTYWxlSGFwcGVuZWQiPgogICAgICAgICAgPG9wdGlvbiA6dmFsdWU9Im51bGwiPnNlbGVjdDwvb3B0aW9uPgogICAgICAgICAgPG9wdGlvbiA6dmFsdWU9InRydWUiPnllcywgaXQncyBvdmVyPC9vcHRpb24+CiAgICAgICAgPC9zZWxlY3Q+CiAgICAgIDwvZGl2PgogICAgICA8YnV0dG9uCiAgICAgICAgY2xhc3M9Im5lcy1idG4gaXMtcHJpbWFyeSBtdC01IgogICAgICAgIDpjbGFzcz0ieyAnaXMtZGlzYWJsZWQnOiBpc0xvYWRpbmcgfHwgIWlzQ29ubmVjdGVkIH0iCiAgICAgICAgOmRpc2FibGVkPSJpc0xvYWRpbmcgfHwgIWlzQ29ubmVjdGVkIgogICAgICAgIHR5cGU9InN1Ym1pdCIKICAgICAgPgogICAgICAgIFVwZGF0ZSBORlQKICAgICAgPC9idXR0b24+CiAgICA8L2Zvcm0+CgogICAgPCEtLW5vdGlmaWNhdGlvbnMtLT4KICAgIDxTdGROb3RpZmljYXRpb25zIDppcy1jb25uZWN0ZWQ9ImlzQ29ubmVjdGVkIiA6aXMtbG9hZGluZz0iaXNMb2FkaW5nIiA6ZXJyb3I9ImVycm9yIiAvPgogICAgPE5vdGlmeVN1Y2Nlc3Mgdi1pZj0idHhJZCIgY2xhc3M9Im10LTUiPgogICAgICA8cD5VcGRhdGUgc3VjY2Vzc2Z1bCEg8J+OiTwvcD4KICAgICAgPExvYWRpbmdJY29uIGFsaWduPSJsZWZ0IiBjbGFzcz0ibXQtNSIgdi1pZj0iIXVwZGF0ZWRORlQiCiAgICAgICAgPkxvYWRpbmcgeW91ciB1cGRhdGVkIE5GVC4uLiAobWlnaHQgdGFrZSBhIG1pbiBvciB0d28pPC9Mb2FkaW5nSWNvbgogICAgICA+CiAgICAgIDxkaXYgdi1lbHNlPgogICAgICAgIDxFeHBsb3JlckxpbmsgOnR4LWlkPSJ0eElkIiAvPgogICAgICAgIDxORlRWaWV3Q2FyZCA6bj0idXBkYXRlZE5GVCIgY2xhc3M9InRleHQtYmxhY2siIC8+CiAgICAgIDwvZGl2PgogICAgPC9Ob3RpZnlTdWNjZXNzPgoKICAgIDwhLS1tb2RhbHMtLT4KICAgIDxNb2RhbFdpbmRvdwogICAgICB2LWlmPSJpc01vZGFsVmlzaWJsZSgndG9vbHRpcE1ldGFkYXRhJykiCiAgICAgIHRpdGxlPSJIb3cgdG8gZm9ybWF0IE1ldGFkYXRhPyIKICAgICAgQGhpZGUtbW9kYWw9ImhpZGVNb2RhbCgndG9vbHRpcE1ldGFkYXRhJykiCiAgICA+CiAgICAgIDxDb250ZW50VG9vbHRpcE1ldGFkYXRhIC8+CiAgICA8L01vZGFsV2luZG93PgogIDwvZGl2Pgo="},{"version":3,"sources":["/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTUpdateForm.vue"],"names":[],"mappings":"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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC;MACH,CAAC,CAAC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC,CAAC;QACF,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;MAC1F,CAAC,CAAC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,CAAC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAA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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C;MACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/quantium/labs/solana-nft-python/nft-armory/src/components/NFTUpdateForm.vue","sourceRoot":"","sourcesContent":["<template>\n  <div>\n    <form @submit.prevent=\"updateNFT\">\n      <div class=\"nes-field\">\n        <div><label for=\"editionMint\">NFT Mint:</label></div>\n        <input\n          type=\"text\"\n          id=\"editionMint\"\n          class=\"nes-input\"\n          v-model=\"editionMint\"\n          :placeholder=\"DEFAULTS.MASTER_MINT\"\n        />\n      </div>\n      <div class=\"nes-field mt-5\">\n        <div>\n          <label for=\"newMetadataData\">New Metadata as JSON (optional):</label>\n          <QuestionMark @click=\"showModal('tooltipMetadata')\" />\n        </div>\n        <textarea\n          rows=\"5\"\n          id=\"newMetadataData\"\n          class=\"nes-input\"\n          v-model=\"newMetadataData\"\n          :placeholder=\"DEFAULTS.METADATA\"\n        ></textarea>\n      </div>\n      <div class=\"nes-field mt-5\">\n        <div><label for=\"newUpdateAuthority\">New Update Authority (optional):</label></div>\n        <input\n          type=\"text\"\n          id=\"newUpdateAuthority\"\n          class=\"nes-input\"\n          v-model=\"newUpdateAuthority\"\n          :placeholder=\"DEFAULTS.UPDATE_AUTHORITY\"\n        />\n      </div>\n      <div>\n        <label for=\"primarySaleHappened\" class=\"mt-5\">Primary Sale Happened? (optional):</label>\n        <QuestionMark external=\"https://docs.metaplex.com/nft-standard#token-metadata-program\" />\n      </div>\n      <div class=\"nes-select\">\n        <select required id=\"primarySaleHappened\" v-model=\"primarySaleHappened\">\n          <option :value=\"null\">select</option>\n          <option :value=\"true\">yes, it's over</option>\n        </select>\n      </div>\n      <button\n        class=\"nes-btn is-primary mt-5\"\n        :class=\"{ 'is-disabled': isLoading || !isConnected }\"\n        :disabled=\"isLoading || !isConnected\"\n        type=\"submit\"\n      >\n        Update NFT\n      </button>\n    </form>\n\n    <!--notifications-->\n    <StdNotifications :is-connected=\"isConnected\" :is-loading=\"isLoading\" :error=\"error\" />\n    <NotifySuccess v-if=\"txId\" class=\"mt-5\">\n      <p>Update successful! 🎉</p>\n      <LoadingIcon align=\"left\" class=\"mt-5\" v-if=\"!updatedNFT\"\n        >Loading your updated NFT... (might take a min or two)</LoadingIcon\n      >\n      <div v-else>\n        <ExplorerLink :tx-id=\"txId\" />\n        <NFTViewCard :n=\"updatedNFT\" class=\"text-black\" />\n      </div>\n    </NotifySuccess>\n\n    <!--modals-->\n    <ModalWindow\n      v-if=\"isModalVisible('tooltipMetadata')\"\n      title=\"How to format Metadata?\"\n      @hide-modal=\"hideModal('tooltipMetadata')\"\n    >\n      <ContentTooltipMetadata />\n    </ModalWindow>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref } from 'vue';\nimport { PublicKey } from '@solana/web3.js';\nimport QuestionMark from '@/components/QuestionMark.vue';\nimport NotifySuccess from '@/components/notifications/NotifySuccess.vue';\nimport LoadingIcon from '@/components/LoadingIcon.vue';\nimport NFTViewCard from '@/components/NFTViewCard.vue';\nimport ModalWindow from '@/components/ModalWindow.vue';\nimport useWallet from '@/composables/wallet';\nimport useError from '@/composables/error';\nimport { INFT } from '@/common/helpers/types';\nimport { NFTGet } from '@/common/NFTget';\nimport { NFTUpdate } from '@/common/NFTupdate';\nimport useModal from '@/composables/modal';\nimport ExplorerLink from '@/components/ExplorerLink.vue';\nimport { objectOneInsideObjectTwo } from '@/common/helpers/util';\nimport ContentTooltipMetadata from '@/components/content/tooltip/ContentTooltipMetadata.vue';\nimport StdNotifications from '@/components/StdNotifications.vue';\nimport { DEFAULTS } from '@/globals';\n\nexport default defineComponent({\n  components: {\n    StdNotifications,\n    ContentTooltipMetadata,\n    ExplorerLink,\n    ModalWindow,\n    NFTViewCard,\n    LoadingIcon,\n    NotifySuccess,\n    QuestionMark,\n  },\n  setup() {\n    const { isConnected, getWallet } = useWallet();\n    const { error, clearError, setError, tryConvertToPk, tryParseJSON, tryParseMetadataData } =\n      useError();\n\n    const isLoading = ref<boolean>(false);\n    const txId = ref<string | null>(null);\n    const updatedNFT = ref<INFT | null>(null);\n\n    const clearPreviousResults = () => {\n      isLoading.value = false;\n      txId.value = null;\n      updatedNFT.value = null;\n      clearError();\n    };\n\n    // --------------------------------------- update nft\n    const editionMint = ref<string | null>(null);\n    const newMetadataData = ref<any>(null);\n    const newUpdateAuthority = ref<string | null>(null);\n    const primarySaleHappened = ref<boolean | null>(null);\n\n    const fetchUpdatedNFT = async (): Promise<void> => {\n      // retry recursively until new attributes confirmed on the network\n      try {\n        const [fetchedNFT] = await NFTGet({ mint: new PublicKey(editionMint.value!) });\n        // if any of the below conditions fail, then we need to fetch again\n        if (\n          (newMetadataData.value &&\n            !objectOneInsideObjectTwo(\n              tryParseMetadataData(tryParseJSON(newMetadataData.value)),\n              fetchedNFT.metadataOnchain.data\n            )) ||\n          (newUpdateAuthority.value &&\n            newUpdateAuthority.value !== fetchedNFT.metadataOnchain.updateAuthority) ||\n          // primary sale can only be set to \"true\" = the only use case we're checking\n          (primarySaleHappened.value &&\n            (fetchedNFT.metadataOnchain.primarySaleHappened as any as number) !== 1)\n        ) {\n          return await fetchUpdatedNFT();\n        }\n\n        updatedNFT.value = fetchedNFT;\n      } catch (e) {\n        await fetchUpdatedNFT();\n      }\n    };\n\n    const updateNFT = async () => {\n      clearPreviousResults();\n      isLoading.value = true;\n\n      const parsedJSON = tryParseJSON(newMetadataData.value);\n      let parsedMetadata;\n      if (parsedJSON) parsedMetadata = tryParseMetadataData(parsedJSON);\n      const editionPk = tryConvertToPk(editionMint.value);\n      const updatePk = tryConvertToPk(newUpdateAuthority.value);\n      if (error.value) {\n        return;\n      }\n\n      NFTUpdate(\n        getWallet() as any,\n        editionPk!,\n        parsedMetadata as any, // null-undefined conflict\n        updatePk as any, // null-undefined conflict\n        primarySaleHappened.value as any // null-undefined conflict\n      )\n        .then(async (result: string) => {\n          txId.value = result;\n          isLoading.value = false;\n          await fetchUpdatedNFT();\n        })\n        .catch((e) => {\n          setError(e);\n          isLoading.value = false;\n        });\n    };\n\n    // --------------------------------------- modals\n    const { registerModal, isModalVisible, showModal, hideModal } = useModal();\n    registerModal('tooltipMetadata');\n\n    return {\n      DEFAULTS,\n      isConnected,\n      error,\n      isLoading,\n      txId,\n      updatedNFT,\n      // update\n      editionMint,\n      newMetadataData,\n      newUpdateAuthority,\n      primarySaleHappened,\n      updateNFT,\n      // modal\n      isModalVisible,\n      showModal,\n      hideModal,\n    };\n  },\n});\n</script>\n\n<style scoped></style>\n"]}]}