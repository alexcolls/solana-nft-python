import { FetchMiddleware } from "@solana/web3.js";
interface ITokenStorage {
    setToken(token: string): void;
    getToken(): string | null;
    getTimeSinceLastSet(): number | null;
}
export declare class LocalTokenStorage implements ITokenStorage {
    setToken(token: string): void;
    getTimeSinceLastSet(): number | null;
    getToken(): string | null;
}
export interface ITokenAuthFetchMiddlewareArgs {
    /**
     * An api endpoint to get a new token. Default /api/get-token
     */
    getTokenUrl?: string;
    /**
     * Optionally override the default storage mechanism of localStorage
     */
    tokenStorage?: ITokenStorage;
    /**
     * Number of milliseconds until token expiry. Default 5 minutes
     */
    tokenExpiry?: number;
    /**
     * Logic to get an authorization token
     */
    getToken: () => Promise<string>;
}
export declare function tokenAuthFetchMiddleware({ tokenStorage, tokenExpiry, // 5 minutes
getToken }: ITokenAuthFetchMiddlewareArgs): FetchMiddleware;
export {};
//# sourceMappingURL=index.d.ts.map