"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenAuthFetchMiddleware = exports.LocalTokenStorage = void 0;
const storage = typeof localStorage !== "undefined"
    ? localStorage
    : require("localstorage-memory");
class LocalTokenStorage {
    setToken(token) {
        storage.setItem("auth-token", token);
        storage.setItem("last-set", new Date().valueOf());
    }
    getTimeSinceLastSet() {
        if (storage.getItem("last-set")) {
            return new Date().valueOf() - Number(storage.getItem("last-set"));
        }
        return null;
    }
    getToken() {
        return storage.getItem("auth-token");
    }
}
exports.LocalTokenStorage = LocalTokenStorage;
function tokenAuthFetchMiddleware({ tokenStorage = new LocalTokenStorage(), tokenExpiry = 5 * 60 * 1000, // 5 minutes
getToken }) {
    return (url, options, fetch) => {
        (() => __awaiter(this, void 0, void 0, function* () {
            try {
                const token = tokenStorage.getToken();
                const timeSinceLastSet = tokenStorage.getTimeSinceLastSet();
                const tokenIsValid = token && timeSinceLastSet && timeSinceLastSet < tokenExpiry;
                if (!tokenIsValid) {
                    tokenStorage.setToken(yield getToken());
                }
            }
            catch (e) {
                console.error(e);
            }
            fetch(url, Object.assign(Object.assign({}, (options || {})), { headers: Object.assign(Object.assign({}, (options || {}).headers), { "Authorization": "Bearer " + tokenStorage.getToken() }) }));
        }))();
    };
}
exports.tokenAuthFetchMiddleware = tokenAuthFetchMiddleware;
//# sourceMappingURL=index.js.map